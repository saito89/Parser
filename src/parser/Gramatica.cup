package parser;
import java_cup.runtime.*; 
import java.io.*;
import java.util.*;

action code{:
     public void ImprimeValor(String str){
        System.out.println("el valor del token"+str) ;
     }
:};
parser code{:

    public void syntax_error(Symbol st){
       token t=(token)st.value;
       report_error("Error Sintactico:"+ t.getValue(),null);
    }

    public static void cargar(String archivo) throws Exception{
        new parser(new Lexer(new FileInputStream(archivo))).parse();
    }


:};

terminal ReservadaString,PLUS,COMILLA_SIMPLE,letra,Auto,Break,Case,Char,Const,Continue,Default,Do,Double,Else,Enum,Extern,Float,For,Goto,If,Int,Long,Register,Return,Short,Signed,Sizeof,Static,Struct,Switch,Typedef,Union,Unsigned,Void,Volatile,While,OPERADOR_ARITMETICO_SUMA,OPERADOR_ARITMETICO_RESTA,OPERADOR_ARITMETICO_MULTIPLICACION,OPERADOR_ARITMETICO_DIVISION,OPERADOR_ARITMETICO_MODULO,OPERADOR_ARITMETICO_INCREMENTO,OPERADOR_ARITMETICO_DECREMENTO,OPERADOR_ARITMETICO_IGUAL,OPERADOR_COMPARACION_Y_RELACION_IGUAL,OPERADOR_COMPARACION_Y_RELACION_MAYOR_IGUAL,OPERADOR_COMPARACION_Y_RELACION_MAYOR,OPERADOR_COMPARACION_Y_RELACION_MENOR_IGUAL,OPERADOR_COMPARACION_Y_RELACION_MENOR,OPERADOR_COMPARACION_Y_RELACION_DIFERENTE,OPERADOR_LOGICO_OR,OPERADOR_LOGICO_AND,OPERADOR_LOGICO_NOT,OPERADOR_BITWISE_AND_BINARIO,OPERADOR_BITWISE_XOR_BINARIO,OPERADOR_BITWISE_OR_BINARIO,OPERADOR_BITWISE_DESPLAZAMIENTO_DERECHA,OPERADOR_BITWISE_DESPLAZAMIENTO_IZQUIERDA,OPERADOR_BITWISE_COMPLEMENTO_A_UNO,OPERADOR_ASIGNACION_CON_SUMA,OPERADOR_ASIGNACION_CON_RESTA,OPERADOR_ASIGNACION_CON_MULTIPLICACION,OPERADOR_ASIGNACION_CON_DIVISION,OPERADOR_ASIGNACION_CON_MODULO,OPERADOR_ASIGNACION_CON_AND_BINARIO,OPERADOR_ASIGNACION_CON_XOR_BINARIO,OPERADOR_ASIGNACION_CON_OR_BINARIO,OPERADOR_ASIGNACION_CON_DESPLAZAMIENTO_IZQUIERDA,OPERADOR_ASIGNACION_CON_DESPLAZAMIENTO_DERECHA,OPERADOR_OTRO_COMA,OPERADOR_OTRO_PUNTO_Y_COMA,OPERADOR_OTRO_PREGUNTA,OPERADOR_OTRO_DOS_PUNTOS,OPERADOR_MIEMBRO_PUNTERO,OPERADOR_PARENTESIS_ABRE,OPERADOR_PARENTESIS_CIERRA,OPERADOR_PARENTESIS_CUADRADO_ABRE,OPERADOR_PARENTESIS_CUADRADO_CIERRA,OPERADOR_LLAVE_ABRE,OPERADOR_LLAVE_CIERRA,IDENTIFICADOR,PALABRA_RESERVADA,NUMERO_FLOTANTE,NUMERO_OCTAL,NUMERO_HEXADECIMAL,NUMERO_FLOTANTE_EXPONENTE,INICIO_COMENTARIO_BLOQUE,FINAL_COMENTARIO_BLOQUE,COMENTARIO_LINEA,ERROR,CARACTER,BLOQUE_COMENTARIO,ESPACIO_BLANCO,STRING;
terminal INT NUMERO_ENTERO,OPERADOR_MIEMBRO_PUNTERO_FLECHA;
non terminal tipo,Letra,Digito,nombre,func,exp,estrControl,inst;
start with func;
tipo ::= COMILLA_SIMPLE Void COMILLA_SIMPLE | COMILLA_SIMPLE Int COMILLA_SIMPLE | COMILLA_SIMPLE Double COMILLA_SIMPLE | COMILLA_SIMPLE Float COMILLA_SIMPLE | COMILLA_SIMPLE Char COMILLA_SIMPLE | COMILLA_SIMPLE Short COMILLA_SIMPLE | COMILLA_SIMPLE Long COMILLA_SIMPLE | COMILLA_SIMPLE Signed COMILLA_SIMPLE | COMILLA_SIMPLE Unsigned COMILLA_SIMPLE;

exp ::= NUMERO_ENTERO;

estrControl ::= Float;

inst ::= Double;

nombre ::= OPERADOR_PARENTESIS_CUADRADO_ABRE letra | NUMERO_ENTERO OPERADOR_PARENTESIS_CUADRADO_CIERRA PLUS;
func ::= tipo nombre OPERADOR_PARENTESIS_ABRE OPERADOR_PARENTESIS_CUADRADO_ABRE tipo nombre OPERADOR_PARENTESIS_CUADRADO_ABRE OPERADOR_OTRO_COMA tipo nombre OPERADOR_PARENTESIS_CUADRADO_CIERRA OPERADOR_ARITMETICO_MULTIPLICACION OPERADOR_PARENTESIS_CUADRADO_CIERRA OPERADOR_ARITMETICO_MULTIPLICACION 
            OPERADOR_PARENTESIS_CIERRA OPERADOR_LLAVE_ABRE OPERADOR_PARENTESIS_CUADRADO_ABRE exp OPERADOR_PARENTESIS_CUADRADO_CIERRA OPERADOR_ARITMETICO_MULTIPLICACION | OPERADOR_PARENTESIS_CUADRADO_ABRE estrControl OPERADOR_PARENTESIS_CUADRADO_CIERRA OPERADOR_ARITMETICO_MULTIPLICACION 
                | OPERADOR_PARENTESIS_CUADRADO_ABRE inst OPERADOR_PARENTESIS_CUADRADO_CIERRA OPERADOR_ARITMETICO_MULTIPLICACION OPERADOR_LLAVE_CIERRA;  