package parser;
import java_cup.runtime.*;

parser code {:



    public void syntax_error(Symbol cur_token) {
        report_error("Syntax error at line " + (cur_token.left+1) +
            ", column " + cur_token.right, null);
    }
public static void main(String args[]) throws Exception
    {
	new parser(new Lexer(System.in)).parse();
    } 
   

:}

terminal AND;
terminal ARRAY;
terminal BEGIN;
terminal ELSE;
terminal END;
terminal IF;
terminal OF;
terminal OR;
terminal PROGRAM; 
terminal PROCEDURE;
terminal THEN;
terminal TYPE;
terminal VAR;
terminal BOOLEAN;
terminal BYTE;
terminal CASE;
terminal CHAR;
terminal CONST;
terminal DIV;
terminal DO;
terminal DOWNTO;
terminal FALSE;
terminal FILE;
terminal FOR;
terminal FORWARD;
terminal FUNCTION;
terminal GOTO;
terminal IN;
terminal INLINE;
terminal INT;
terminal LABEL;
terminal LONGINT;
terminal MOD;
terminal NIL;
terminal NOT;
terminal PACKED;
terminal READ;
terminal REAL;
terminal RECORD;
terminal REPEAT;
terminal SET;
terminal SHORTINT;
terminal STRING;
terminal TO;
terminal TRUE;
terminal UNTIL;
terminal WHILE;
terminal WRITE;
terminal XOR;
terminal OPERADOR_ARITMETICO_MULTIPLICACION;
terminal OPERADOR_ARITMETICO_SUMA;
terminal OPERADOR_ARITMETICO_RESTA;
terminal OPERADOR_ARITMETICO_DIVISION;
terminal OPERADOR_OTRO_PUNTO_Y_COMA;
terminal OPERADOR_OTRO_COMA;
terminal OPERADOR_PARENTESIS_ABRE;
terminal OPERADOR_PARENTESIS_CIERRA;
terminal OPERADOR_PARENTESIS_CUADRADO_ABRE;
terminal OPERADOR_PARENTESIS_CUADRADO_CIERRA;
terminal OPERADOR_ARITMETICO_IGUAL; 
terminal OPERADOR_COMPARACION_Y_RELACION_MENOR;
terminal OPERADOR_COMPARACION_Y_RELACION_MAYOR;
terminal OPERADOR_COMPARACION_Y_RELACION_MENOR_IGUAL_EQ;
terminal OPERADOR_COMPARACION_Y_RELACION_MAYOR_IGUAL;
terminal OPERADOR_ARITMETICO_INCREMENTAR;
terminal OPERADOR_ARITMETICO_DECREMENTAR;
terminal OPERADOR_OTRO_DOS_PUNTOS;
terminal OPERADOR_OTRO_ASSIGNMENT;
terminal OPERADOR_MIEMBRO_PUNTERO;
terminal OPERADOR_COMPARACION_DIFERENTE;
terminal OPERADOR_ARITMETICO_INCREMENTAR_IGUAL;
terminal OPERADOR_ARITMETICO_DECREMENTAR_IGUAL;
terminal OPERADOR_ARITMETICO_MULTIPLICAR_IGUAL;
terminal OPERADOR_ARITMETICO_DIVIDIR_IGUAL;
terminal OPERADOR_ASIGNAR_DERECHA;
terminal OPERADOR_ASIGNAR_IZQUIERDA;
terminal OPERADOR_ASIGNAR_IZQUIERDA_IGUAL;
terminal OPERADOR_ASIGNAR_DERECHA_IGUAL; 

terminal IDENTIFICADOR;
terminal NUMERO_FLOTANTE;
terminal NUMERO_ENTERO;
terminal CARACTER;

terminal ERROR;
terminal NUMERO_FLOTANTE_CIENTIFICO;

non terminal Conj_Sent;
non terminal Programa,Cabecera,Declaraciones,Declaracion_const,Constantes,Una_const,Constante,Signo_opc,Const_sin_signo,Declaracion_var,Variables,Una_var,Lista_id,Tipo,
Sentencia_compuesta,Sentencia,Sentencia_asignacion,Expresion,Sentencia_if,Resto_if,Sentencia_while,Sentencia_repeat,Sentencia_for,
ListaConstantesCase,SentenciaConstantesCase,Sentencia_case,Resto_case;
non terminal ArithmeticOperators,RelationalOperators,Condicion;


start with Programa;

Programa ::= Cabecera Declaraciones Sentencia_compuesta;

Cabecera ::= PROGRAM IDENTIFICADOR;


Declaraciones ::= Declaracion_const Declaracion_var;

Declaracion_const ::= CONST Constantes|error;

Constantes ::= Una_const OPERADOR_OTRO_PUNTO_Y_COMA Constantes | Una_const OPERADOR_OTRO_PUNTO_Y_COMA;

Una_const ::= IDENTIFICADOR OPERADOR_ARITMETICO_IGUAL Constante;

Constante ::= Signo_opc Const_sin_signo | CHAR;

Signo_opc ::= OPERADOR_ARITMETICO_SUMA | OPERADOR_ARITMETICO_RESTA |;

Const_sin_signo ::= NUMERO_ENTERO | NUMERO_FLOTANTE | NUMERO_FLOTANTE_CIENTIFICO;

Declaracion_var ::= VAR Variables|error;

Variables ::= Una_var Variables | Una_var;

Una_var ::= Lista_id OPERADOR_OTRO_DOS_PUNTOS Tipo OPERADOR_OTRO_PUNTO_Y_COMA;

Lista_id ::= IDENTIFICADOR OPERADOR_OTRO_COMA Lista_id | IDENTIFICADOR;

Tipo ::= CHAR | LONGINT | REAL | SHORTINT | STRING | BOOLEAN | INT;


Sentencia_compuesta ::= BEGIN Conj_Sent END;

Conj_Sent ::= Sentencia Conj_Sent | Sentencia;

Sentencia ::= Sentencia_asignacion | Sentencia_if | Sentencia_while | Sentencia_repeat | Sentencia_for | Sentencia_case | Sentencia_compuesta |error;

Sentencia_asignacion ::= IDENTIFICADOR OPERADOR_OTRO_ASSIGNMENT Expresion OPERADOR_OTRO_PUNTO_Y_COMA;

Expresion ::= IDENTIFICADOR | NUMERO_ENTERO | NUMERO_FLOTANTE | CHAR | NUMERO_FLOTANTE_CIENTIFICO;


ArithmeticOperators ::= OPERADOR_ARITMETICO_SUMA | OPERADOR_ARITMETICO_RESTA | OPERADOR_ARITMETICO_MULTIPLICACION | DIV | MOD;

RelationalOperators ::= OPERADOR_ARITMETICO_IGUAL | OPERADOR_COMPARACION_DIFERENTE | OPERADOR_COMPARACION_Y_RELACION_MAYOR | OPERADOR_COMPARACION_Y_RELACION_MENOR | OPERADOR_COMPARACION_Y_RELACION_MAYOR_IGUAL | OPERADOR_COMPARACION_Y_RELACION_MENOR_IGUAL_EQ;


Condicion ::= Expresion ArithmeticOperators Expresion | Expresion RelationalOperators Expresion;

Sentencia_if ::= IF Condicion THEN BEGIN Sentencia END Resto_if;

Resto_if ::= ELSE BEGIN Sentencia END | ;

Sentencia_while ::= WHILE Condicion DO Sentencia_compuesta;

Sentencia_repeat ::= REPEAT Conj_Sent UNTIL Condicion;

Sentencia_for ::= FOR IDENTIFICADOR OPERADOR_OTRO_ASSIGNMENT Expresion TO Expresion DO Sentencia_compuesta OPERADOR_OTRO_PUNTO_Y_COMA;

ListaConstantesCase ::= ListaConstantesCase Constante OPERADOR_OTRO_DOS_PUNTOS SentenciaConstantesCase OPERADOR_OTRO_PUNTO_Y_COMA | Constante OPERADOR_OTRO_DOS_PUNTOS SentenciaConstantesCase OPERADOR_OTRO_PUNTO_Y_COMA;

SentenciaConstantesCase ::= Sentencia_asignacion | Sentencia_if | Sentencia_while | Sentencia_repeat | Sentencia_for | Sentencia_case;

Sentencia_case ::= CASE Constante OF ListaConstantesCase Resto_case;

Resto_case ::= ELSE SentenciaConstantesCase;

TipoFuncion ::= Funcion | Procedure;

ListaParametros ::= ListaParametros Tipo IDENTIFICADOR OPERADOR_OTRO_COMA | Tipo IDENTIFICADOR; 

Funcion ::= FUNCTION IDENTIFICADOR OPERADOR_PARENTESIS_ABRE ListaParametros OPERADOR_PARENTESIS_CIERRA OPERADOR_OTRO_DOS_PUNTOS Tipo BEGIN Declaraciones Conj_Sent IDENTIFICADOR OPERADOR_OTRO_ASSIGNMENT Constante END;
