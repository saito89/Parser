
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Jun 03 22:12:38 CST 2013
//----------------------------------------------------

package parser;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Jun 03 22:12:38 CST 2013
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\135\000\002\002\004\000\002\003\006\000\002\003" +
    "\004\000\002\003\005\000\002\004\004\000\002\044\007" +
    "\000\002\044\006\000\002\045\007\000\002\045\007\000" +
    "\002\042\015\000\002\042\015\000\002\005\004\000\002" +
    "\041\004\000\002\041\004\000\002\041\004\000\002\041" +
    "\003\000\002\041\003\000\002\041\003\000\002\006\004" +
    "\000\002\006\003\000\002\007\005\000\002\007\004\000" +
    "\002\010\005\000\002\011\004\000\002\011\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\002\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\014\004" +
    "\000\002\014\003\000\002\015\005\000\002\015\003\000" +
    "\002\016\006\000\002\017\005\000\002\017\003\000\002" +
    "\017\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\021\005\000\002\002\004\000" +
    "\002\002\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\023\006" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\036\003\000\002" +
    "\036\003\000\002\036\003\000\002\036\003\000\002\036" +
    "\003\000\002\037\003\000\002\037\003\000\002\037\003" +
    "\000\002\037\003\000\002\037\003\000\002\037\003\000" +
    "\002\040\005\000\002\040\005\000\002\025\011\000\002" +
    "\026\006\000\002\026\002\000\002\027\006\000\002\030" +
    "\006\000\002\031\013\000\002\032\006\000\002\032\005" +
    "\000\002\033\003\000\002\033\003\000\002\033\003\000" +
    "\002\033\003\000\002\033\003\000\002\034\007\000\002" +
    "\035\004\000\002\043\006\000\002\043\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\264\000\004\014\006\001\002\000\010\003\012\006" +
    "\014\025\011\001\002\000\004\002\010\001\002\000\004" +
    "\122\007\001\002\000\010\003\ufffd\006\ufffd\025\ufffd\001" +
    "\002\000\004\002\001\001\002\000\004\122\226\001\002" +
    "\000\006\003\uffee\020\uffee\001\002\000\010\006\014\015" +
    "\201\035\205\001\002\000\022\003\057\006\014\011\054" +
    "\023\061\033\047\053\046\062\045\122\064\001\002\000" +
    "\004\002\uffff\001\002\000\006\003\021\020\017\001\002" +
    "\000\006\003\024\122\025\001\002\000\026\003\ufff6\006" +
    "\ufff6\011\ufff6\015\ufff6\023\ufff6\033\ufff6\035\ufff6\053\ufff6" +
    "\062\ufff6\122\ufff6\001\002\000\026\003\uffe1\006\uffe1\011" +
    "\uffe1\015\uffe1\023\uffe1\033\uffe1\035\uffe1\053\uffe1\062\uffe1" +
    "\122\uffe1\001\002\000\032\003\uffdf\006\uffdf\011\uffdf\015" +
    "\uffdf\023\uffdf\033\uffdf\035\uffdf\053\uffdf\062\uffdf\071\043" +
    "\074\uffdf\122\uffdf\001\002\000\004\106\031\001\002\000" +
    "\004\106\uffdb\001\002\000\006\072\027\106\uffdc\001\002" +
    "\000\026\003\uffe2\006\uffe2\011\uffe2\015\uffe2\023\uffe2\033" +
    "\uffe2\035\uffe2\053\uffe2\062\uffe2\122\uffe2\001\002\000\006" +
    "\003\024\122\025\001\002\000\004\106\uffdd\001\002\000" +
    "\020\021\037\024\040\041\041\043\036\051\035\055\034" +
    "\056\033\001\002\000\004\071\042\001\002\000\010\006" +
    "\uffd6\071\uffd6\122\uffd6\001\002\000\010\006\uffd7\071\uffd7" +
    "\122\uffd7\001\002\000\010\006\uffd8\071\uffd8\122\uffd8\001" +
    "\002\000\010\006\uffd9\071\uffd9\122\uffd9\001\002\000\010" +
    "\006\uffd5\071\uffd5\122\uffd5\001\002\000\010\006\uffda\071" +
    "\uffda\122\uffda\001\002\000\010\006\uffd4\071\uffd4\122\uffd4" +
    "\001\002\000\032\003\uffde\006\uffde\011\uffde\015\uffde\023" +
    "\uffde\033\uffde\035\uffde\053\uffde\062\uffde\071\uffde\074\uffde" +
    "\122\uffde\001\002\000\006\003\024\122\025\001\002\000" +
    "\030\003\uffe0\006\uffe0\011\uffe0\015\uffe0\023\uffe0\033\uffe0" +
    "\035\uffe0\053\uffe0\062\uffe0\074\uffe0\122\uffe0\001\002\000" +
    "\014\024\072\122\067\123\066\124\071\127\070\001\002" +
    "\000\022\003\057\006\014\011\054\023\061\033\047\053" +
    "\046\062\045\122\064\001\002\000\004\122\162\001\002" +
    "\000\026\003\uffcb\006\uffcb\010\uffcb\011\uffcb\023\uffcb\033" +
    "\uffcb\053\uffcb\061\uffcb\062\uffcb\122\uffcb\001\002\000\026" +
    "\003\uffcc\006\uffcc\010\uffcc\011\uffcc\023\uffcc\033\uffcc\053" +
    "\uffcc\061\uffcc\062\uffcc\122\uffcc\001\002\000\026\003\uffcd" +
    "\006\uffcd\010\uffcd\011\uffcd\023\uffcd\033\uffcd\053\uffcd\061" +
    "\uffcd\062\uffcd\122\uffcd\001\002\000\026\003\057\006\014" +
    "\010\uffd1\011\054\023\061\033\047\053\046\061\uffd1\062" +
    "\045\122\064\001\002\000\014\024\072\122\067\123\066" +
    "\124\071\127\070\001\002\000\026\003\uffcf\006\uffcf\010" +
    "\uffcf\011\uffcf\023\uffcf\033\uffcf\053\uffcf\061\uffcf\062\uffcf" +
    "\122\uffcf\001\002\000\026\003\uffd0\006\uffd0\010\uffd0\011" +
    "\uffd0\023\uffd0\033\uffd0\053\uffd0\061\uffd0\062\uffd0\122\uffd0" +
    "\001\002\000\026\003\uffc9\006\uffc9\010\uffc9\011\uffc9\023" +
    "\uffc9\033\uffc9\053\uffc9\061\uffc9\062\uffc9\122\uffc9\001\002" +
    "\000\026\003\uffca\006\uffca\010\uffca\011\uffca\023\uffca\033" +
    "\uffca\053\uffca\061\uffca\062\uffca\122\uffca\001\002\000\016" +
    "\024\102\066\101\067\077\123\uffe6\124\uffe6\127\uffe6\001" +
    "\002\000\026\003\uffce\006\uffce\010\uffce\011\uffce\023\uffce" +
    "\033\uffce\053\uffce\061\uffce\062\uffce\122\uffce\001\002\000" +
    "\004\010\075\001\002\000\004\107\065\001\002\000\014" +
    "\024\072\122\067\123\066\124\071\127\070\001\002\000" +
    "\076\003\uffc5\006\uffc5\007\uffc5\010\uffc5\011\uffc5\016\uffc5" +
    "\023\uffc5\024\uffc5\026\uffc5\027\uffc5\033\uffc5\044\uffc5\053" +
    "\uffc5\057\uffc5\061\uffc5\062\uffc5\065\uffc5\066\uffc5\067\uffc5" +
    "\071\uffc5\077\uffc5\100\uffc5\101\uffc5\102\uffc5\103\uffc5\111" +
    "\uffc5\122\uffc5\123\uffc5\124\uffc5\127\uffc5\001\002\000\076" +
    "\003\uffc7\006\uffc7\007\uffc7\010\uffc7\011\uffc7\016\uffc7\023" +
    "\uffc7\024\uffc7\026\uffc7\027\uffc7\033\uffc7\044\uffc7\053\uffc7" +
    "\057\uffc7\061\uffc7\062\uffc7\065\uffc7\066\uffc7\067\uffc7\071" +
    "\uffc7\077\uffc7\100\uffc7\101\uffc7\102\uffc7\103\uffc7\111\uffc7" +
    "\122\uffc7\123\uffc7\124\uffc7\127\uffc7\001\002\000\076\003" +
    "\uffc3\006\uffc3\007\uffc3\010\uffc3\011\uffc3\016\uffc3\023\uffc3" +
    "\024\uffc3\026\uffc3\027\uffc3\033\uffc3\044\uffc3\053\uffc3\057" +
    "\uffc3\061\uffc3\062\uffc3\065\uffc3\066\uffc3\067\uffc3\071\uffc3" +
    "\077\uffc3\100\uffc3\101\uffc3\102\uffc3\103\uffc3\111\uffc3\122" +
    "\uffc3\123\uffc3\124\uffc3\127\uffc3\001\002\000\076\003\uffc6" +
    "\006\uffc6\007\uffc6\010\uffc6\011\uffc6\016\uffc6\023\uffc6\024" +
    "\uffc6\026\uffc6\027\uffc6\033\uffc6\044\uffc6\053\uffc6\057\uffc6" +
    "\061\uffc6\062\uffc6\065\uffc6\066\uffc6\067\uffc6\071\uffc6\077" +
    "\uffc6\100\uffc6\101\uffc6\102\uffc6\103\uffc6\111\uffc6\122\uffc6" +
    "\123\uffc6\124\uffc6\127\uffc6\001\002\000\076\003\uffc4\006" +
    "\uffc4\007\uffc4\010\uffc4\011\uffc4\016\uffc4\023\uffc4\024\uffc4" +
    "\026\uffc4\027\uffc4\033\uffc4\044\uffc4\053\uffc4\057\uffc4\061" +
    "\uffc4\062\uffc4\065\uffc4\066\uffc4\067\uffc4\071\uffc4\077\uffc4" +
    "\100\uffc4\101\uffc4\102\uffc4\103\uffc4\111\uffc4\122\uffc4\123" +
    "\uffc4\124\uffc4\127\uffc4\001\002\000\004\071\074\001\002" +
    "\000\044\003\uffc8\006\uffc8\007\uffc8\010\uffc8\011\uffc8\023" +
    "\uffc8\024\uffc8\033\uffc8\053\uffc8\061\uffc8\062\uffc8\066\uffc8" +
    "\067\uffc8\122\uffc8\123\uffc8\124\uffc8\127\uffc8\001\002\000" +
    "\050\002\uffd3\003\uffd3\006\uffd3\007\uffd3\010\uffd3\011\uffd3" +
    "\023\uffd3\024\uffd3\033\uffd3\053\uffd3\061\uffd3\062\uffd3\066" +
    "\uffd3\067\uffd3\071\uffd3\122\uffd3\123\uffd3\124\uffd3\127\uffd3" +
    "\001\002\000\010\123\123\124\126\127\125\001\002\000" +
    "\010\123\uffe7\124\uffe7\127\uffe7\001\002\000\004\012\103" +
    "\001\002\000\010\123\uffe8\124\uffe8\127\uffe8\001\002\000" +
    "\010\012\uffe9\071\uffe9\106\uffe9\001\002\000\016\024\102" +
    "\066\101\067\077\123\uffe6\124\uffe6\127\uffe6\001\002\000" +
    "\004\106\121\001\002\000\020\007\107\024\102\066\101" +
    "\067\077\123\uffe6\124\uffe6\127\uffe6\001\002\000\044\003" +
    "\uffa8\006\uffa8\007\uffa8\010\uffa8\011\uffa8\023\uffa8\024\uffa8" +
    "\033\uffa8\053\uffa8\061\uffa8\062\uffa8\066\uffa8\067\uffa8\122" +
    "\uffa8\123\uffa8\124\uffa8\127\uffa8\001\002\000\014\023\061" +
    "\033\047\053\046\062\045\122\064\001\002\000\004\106" +
    "\111\001\002\000\014\023\061\033\047\053\046\062\045" +
    "\122\064\001\002\000\044\003\uffaa\006\uffaa\007\uffaa\010" +
    "\uffaa\011\uffaa\023\uffaa\024\uffaa\033\uffaa\053\uffaa\061\uffaa" +
    "\062\uffaa\066\uffaa\067\uffaa\122\uffaa\123\uffaa\124\uffaa\127" +
    "\uffaa\001\002\000\020\007\uffaf\024\uffaf\066\uffaf\067\uffaf" +
    "\123\uffaf\124\uffaf\127\uffaf\001\002\000\044\003\uffa9\006" +
    "\uffa9\007\uffa9\010\uffa9\011\uffa9\023\uffa9\024\uffa9\033\uffa9" +
    "\053\uffa9\061\uffa9\062\uffa9\066\uffa9\067\uffa9\122\uffa9\123" +
    "\uffa9\124\uffa9\127\uffa9\001\002\000\044\003\uffab\006\uffab" +
    "\007\uffab\010\uffab\011\uffab\023\uffab\024\uffab\033\uffab\053" +
    "\uffab\061\uffab\062\uffab\066\uffab\067\uffab\122\uffab\123\uffab" +
    "\124\uffab\127\uffab\001\002\000\044\003\uffad\006\uffad\007" +
    "\uffad\010\uffad\011\uffad\023\uffad\024\uffad\033\uffad\053\uffad" +
    "\061\uffad\062\uffad\066\uffad\067\uffad\122\uffad\123\uffad\124" +
    "\uffad\127\uffad\001\002\000\044\003\uffac\006\uffac\007\uffac" +
    "\010\uffac\011\uffac\023\uffac\024\uffac\033\uffac\053\uffac\061" +
    "\uffac\062\uffac\066\uffac\067\uffac\122\uffac\123\uffac\124\uffac" +
    "\127\uffac\001\002\000\044\003\uffa7\006\uffa7\007\uffa7\010" +
    "\uffa7\011\uffa7\023\uffa7\024\uffa7\033\uffa7\053\uffa7\061\uffa7" +
    "\062\uffa7\066\uffa7\067\uffa7\122\uffa7\123\uffa7\124\uffa7\127" +
    "\uffa7\001\002\000\014\023\061\033\047\053\046\062\045" +
    "\122\064\001\002\000\020\007\uffae\024\uffae\066\uffae\067" +
    "\uffae\123\uffae\124\uffae\127\uffae\001\002\000\010\012\uffe4" +
    "\071\uffe4\106\uffe4\001\002\000\010\012\uffea\071\uffea\106" +
    "\uffea\001\002\000\010\012\uffe3\071\uffe3\106\uffe3\001\002" +
    "\000\010\012\uffe5\071\uffe5\106\uffe5\001\002\000\004\016" +
    "\150\001\002\000\030\026\143\044\140\065\133\066\136" +
    "\067\135\077\132\100\142\101\145\102\137\103\141\111" +
    "\144\001\002\000\014\024\072\122\067\123\066\124\071" +
    "\127\070\001\002\000\014\024\uffbd\122\uffbd\123\uffbd\124" +
    "\uffbd\127\uffbd\001\002\000\014\024\uffc0\122\uffc0\123\uffc0" +
    "\124\uffc0\127\uffc0\001\002\000\014\024\072\122\067\123" +
    "\066\124\071\127\070\001\002\000\014\024\uffc1\122\uffc1" +
    "\123\uffc1\124\uffc1\127\uffc1\001\002\000\014\024\uffc2\122" +
    "\uffc2\123\uffc2\124\uffc2\127\uffc2\001\002\000\014\024\uffb8" +
    "\122\uffb8\123\uffb8\124\uffb8\127\uffb8\001\002\000\014\024" +
    "\uffbe\122\uffbe\123\uffbe\124\uffbe\127\uffbe\001\002\000\014" +
    "\024\uffb9\122\uffb9\123\uffb9\124\uffb9\127\uffb9\001\002\000" +
    "\014\024\uffba\122\uffba\123\uffba\124\uffba\127\uffba\001\002" +
    "\000\014\024\uffbf\122\uffbf\123\uffbf\124\uffbf\127\uffbf\001" +
    "\002\000\014\024\uffbc\122\uffbc\123\uffbc\124\uffbc\127\uffbc" +
    "\001\002\000\014\024\uffbb\122\uffbb\123\uffbb\124\uffbb\127" +
    "\uffbb\001\002\000\050\003\uffb7\006\uffb7\007\uffb7\010\uffb7" +
    "\011\uffb7\016\uffb7\023\uffb7\024\uffb7\027\uffb7\033\uffb7\053" +
    "\uffb7\061\uffb7\062\uffb7\066\uffb7\067\uffb7\122\uffb7\123\uffb7" +
    "\124\uffb7\127\uffb7\001\002\000\050\003\uffb6\006\uffb6\007" +
    "\uffb6\010\uffb6\011\uffb6\016\uffb6\023\uffb6\024\uffb6\027\uffb6" +
    "\033\uffb6\053\uffb6\061\uffb6\062\uffb6\066\uffb6\067\uffb6\122" +
    "\uffb6\123\uffb6\124\uffb6\127\uffb6\001\002\000\004\006\151" +
    "\001\002\000\022\003\057\006\014\011\054\023\061\033" +
    "\047\053\046\062\045\122\064\001\002\000\004\010\153" +
    "\001\002\000\030\003\uffb3\006\uffb3\007\155\010\uffb3\011" +
    "\uffb3\023\uffb3\033\uffb3\053\uffb3\061\uffb3\062\uffb3\122\uffb3" +
    "\001\002\000\026\003\uffb5\006\uffb5\010\uffb5\011\uffb5\023" +
    "\uffb5\033\uffb5\053\uffb5\061\uffb5\062\uffb5\122\uffb5\001\002" +
    "\000\004\006\156\001\002\000\022\003\057\006\014\011" +
    "\054\023\061\033\047\053\046\062\045\122\064\001\002" +
    "\000\004\010\160\001\002\000\026\003\uffb4\006\uffb4\010" +
    "\uffb4\011\uffb4\023\uffb4\033\uffb4\053\uffb4\061\uffb4\062\uffb4" +
    "\122\uffb4\001\002\000\006\010\uffd2\061\uffd2\001\002\000" +
    "\004\107\163\001\002\000\014\024\072\122\067\123\066" +
    "\124\071\127\070\001\002\000\004\057\165\001\002\000" +
    "\014\024\072\122\067\123\066\124\071\127\070\001\002" +
    "\000\004\027\167\001\002\000\004\006\014\001\002\000" +
    "\004\071\171\001\002\000\044\003\uffb0\006\uffb0\007\uffb0" +
    "\010\uffb0\011\uffb0\023\uffb0\024\uffb0\033\uffb0\053\uffb0\061" +
    "\uffb0\062\uffb0\066\uffb0\067\uffb0\122\uffb0\123\uffb0\124\uffb0" +
    "\127\uffb0\001\002\000\004\061\173\001\002\000\014\024" +
    "\072\122\067\123\066\124\071\127\070\001\002\000\044" +
    "\003\uffb1\006\uffb1\007\uffb1\010\uffb1\011\uffb1\023\uffb1\024" +
    "\uffb1\033\uffb1\053\uffb1\061\uffb1\062\uffb1\066\uffb1\067\uffb1" +
    "\122\uffb1\123\uffb1\124\uffb1\127\uffb1\001\002\000\004\027" +
    "\176\001\002\000\004\006\014\001\002\000\044\003\uffb2" +
    "\006\uffb2\007\uffb2\010\uffb2\011\uffb2\023\uffb2\024\uffb2\033" +
    "\uffb2\053\uffb2\061\uffb2\062\uffb2\066\uffb2\067\uffb2\122\uffb2" +
    "\123\uffb2\124\uffb2\127\uffb2\001\002\000\010\006\ufff1\015" +
    "\ufff1\035\ufff1\001\002\000\004\122\254\001\002\000\010" +
    "\006\ufff2\015\ufff2\035\ufff2\001\002\000\004\002\ufffe\001" +
    "\002\000\010\006\ufff0\015\ufff0\035\ufff0\001\002\000\010" +
    "\050\213\063\215\122\214\001\002\000\010\006\014\015" +
    "\201\035\205\001\002\000\010\006\ufff3\015\ufff3\035\ufff3" +
    "\001\002\000\010\006\ufff5\015\ufff5\035\ufff5\001\002\000" +
    "\004\002\000\001\002\000\010\006\ufff4\015\ufff4\035\ufff4" +
    "\001\002\000\004\073\250\001\002\000\004\073\232\001" +
    "\002\000\004\073\216\001\002\000\006\003\024\122\220" +
    "\001\002\000\004\074\231\001\002\000\010\072\027\077" +
    "\227\106\uffdc\001\002\000\004\071\224\001\002\000\004" +
    "\074\223\001\002\000\010\006\ufff9\015\ufff9\035\ufff9\001" +
    "\002\000\012\003\uffec\020\uffec\074\uffec\122\226\001\002" +
    "\000\010\003\uffed\020\uffed\074\uffed\001\002\000\004\077" +
    "\227\001\002\000\016\024\102\066\101\067\077\123\uffe6" +
    "\124\uffe6\127\uffe6\001\002\000\004\071\uffeb\001\002\000" +
    "\010\006\ufffa\015\ufffa\035\ufffa\001\002\000\020\021\037" +
    "\024\040\041\041\043\036\051\035\055\034\056\033\001" +
    "\002\000\004\122\247\001\002\000\022\021\037\024\040" +
    "\041\041\043\036\051\035\055\034\056\033\074\236\001" +
    "\002\000\004\122\245\001\002\000\004\106\237\001\002" +
    "\000\020\021\037\024\040\041\041\043\036\051\035\055" +
    "\034\056\033\001\002\000\004\006\241\001\002\000\006" +
    "\003\012\025\011\001\002\000\022\003\057\006\014\011" +
    "\054\023\061\033\047\053\046\062\045\122\064\001\002" +
    "\000\004\010\244\001\002\000\010\006\ufff7\015\ufff7\035" +
    "\ufff7\001\002\000\004\072\246\001\002\000\022\021\uffa6" +
    "\024\uffa6\041\uffa6\043\uffa6\051\uffa6\055\uffa6\056\uffa6\074" +
    "\uffa6\001\002\000\022\021\uffa5\024\uffa5\041\uffa5\043\uffa5" +
    "\051\uffa5\055\uffa5\056\uffa5\074\uffa5\001\002\000\022\021" +
    "\037\024\040\041\041\043\036\051\035\055\034\056\033" +
    "\074\252\001\002\000\022\021\037\024\040\041\041\043" +
    "\036\051\035\055\034\056\033\074\253\001\002\000\010" +
    "\006\ufffb\015\ufffb\035\ufffb\001\002\000\010\006\ufffc\015" +
    "\ufffc\035\ufffc\001\002\000\004\073\255\001\002\000\020" +
    "\021\037\024\040\041\041\043\036\051\035\055\034\056" +
    "\033\001\002\000\022\021\037\024\040\041\041\043\036" +
    "\051\035\055\034\056\033\074\257\001\002\000\004\106" +
    "\260\001\002\000\020\021\037\024\040\041\041\043\036" +
    "\051\035\055\034\056\033\001\002\000\004\006\262\001" +
    "\002\000\006\003\012\025\011\001\002\000\022\003\057" +
    "\006\014\011\054\023\061\033\047\053\046\062\045\122" +
    "\064\001\002\000\004\010\265\001\002\000\010\006\ufff8" +
    "\015\ufff8\035\ufff8\001\002\000\006\003\uffef\020\uffef\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\264\000\006\003\004\004\003\001\001\000\010\005" +
    "\012\006\015\021\014\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\265\010\220\001\001\000\002\001\001\000\014\021\202" +
    "\041\205\042\201\044\177\045\203\001\001\000\024\002" +
    "\062\021\057\022\052\023\055\025\054\027\061\030\051" +
    "\031\050\034\047\001\001\000\002\001\001\000\004\014" +
    "\017\001\001\000\010\015\025\016\021\017\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\027\001\001\000\002\001\001\000" +
    "\004\020\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\015\043\016\021\017\022\001\001\000" +
    "\002\001\001\000\006\024\127\040\174\001\001\000\024" +
    "\002\171\021\057\022\052\023\055\025\054\027\061\030" +
    "\051\031\050\034\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\002" +
    "\160\021\057\022\052\023\055\025\054\027\061\030\051" +
    "\031\050\034\047\001\001\000\006\024\127\040\126\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\011\077\012\075\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\024\072\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\123\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\011\103\012\075\032" +
    "\104\001\001\000\002\001\001\000\010\011\107\012\075" +
    "\035\105\001\001\000\002\001\001\000\016\023\115\027" +
    "\116\030\114\031\111\033\117\034\113\001\001\000\002" +
    "\001\001\000\016\023\115\027\116\030\114\031\111\033" +
    "\112\034\113\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\023\115\027\116" +
    "\030\114\031\111\033\121\034\113\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\036\133\037" +
    "\130\001\001\000\004\024\146\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\024\145\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\021\057\022\151\023" +
    "\055\025\054\027\061\030\051\031\050\034\047\001\001" +
    "\000\002\001\001\000\004\026\153\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\021\057\022\156\023\055" +
    "\025\054\027\061\030\051\031\050\034\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\163\001\001\000\002\001\001\000" +
    "\004\024\165\001\001\000\002\001\001\000\004\021\167" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\024\127\040\173\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\176\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\021\210\042\207\044\206\045\211\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\007\216\010\220\015\221\016\021\017\022\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\224\010" +
    "\220\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\011\227\012\075\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\020\232\043\233\001\001\000\002\001\001" +
    "\000\004\020\234\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\237\001\001\000\002\001\001\000\006" +
    "\005\241\006\015\001\001\000\024\002\242\021\057\022" +
    "\052\023\055\025\054\027\061\030\051\031\050\034\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\020\232" +
    "\043\250\001\001\000\004\020\234\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\020\232" +
    "\043\255\001\001\000\004\020\234\001\001\000\002\001" +
    "\001\000\004\020\260\001\001\000\002\001\001\000\006" +
    "\005\262\006\015\001\001\000\024\002\263\021\057\022" +
    "\052\023\055\025\054\027\061\030\051\031\050\034\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}






    public void syntax_error(Symbol cur_token) {
        report_error("Syntax error at line " + (cur_token.left+1) +
            ", column " + cur_token.right, null);
    }
public static void main(String args[]) throws Exception
    {
	new parser(new Lexer(System.in)).parse();
    } 
   


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ListaParametros ::= Tipo IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListaParametros",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ListaParametros ::= ListaParametros Tipo IDENTIFICADOR OPERADOR_OTRO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListaParametros",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Resto_case ::= ELSE SentenciaConstantesCase 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Resto_case",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Sentencia_case ::= CASE Constante OF ListaConstantesCase Resto_case 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia_case",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // SentenciaConstantesCase ::= Sentencia_case 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentenciaConstantesCase",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // SentenciaConstantesCase ::= Sentencia_for 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentenciaConstantesCase",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // SentenciaConstantesCase ::= Sentencia_repeat 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentenciaConstantesCase",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // SentenciaConstantesCase ::= Sentencia_while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentenciaConstantesCase",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // SentenciaConstantesCase ::= Sentencia_asignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentenciaConstantesCase",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ListaConstantesCase ::= Constante OPERADOR_OTRO_DOS_PUNTOS SentenciaConstantesCase 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListaConstantesCase",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ListaConstantesCase ::= ListaConstantesCase Constante OPERADOR_OTRO_DOS_PUNTOS SentenciaConstantesCase 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListaConstantesCase",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Sentencia_for ::= FOR IDENTIFICADOR OPERADOR_OTRO_ASSIGNMENT Expresion TO Expresion DO Sentencia_compuesta OPERADOR_OTRO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia_for",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Sentencia_repeat ::= REPEAT Conj_Sent UNTIL Condicion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia_repeat",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Sentencia_while ::= WHILE Condicion DO Sentencia_compuesta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia_while",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Resto_if ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Resto_if",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Resto_if ::= ELSE BEGIN Sentencia END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Resto_if",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Sentencia_if ::= IF Condicion THEN BEGIN Sentencia END Resto_if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia_if",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Condicion ::= Expresion RelationalOperators Expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Condicion ::= Expresion ArithmeticOperators Expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // RelationalOperators ::= OPERADOR_COMPARACION_Y_RELACION_MENOR_IGUAL_EQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelationalOperators",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // RelationalOperators ::= OPERADOR_COMPARACION_Y_RELACION_MAYOR_IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelationalOperators",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // RelationalOperators ::= OPERADOR_COMPARACION_Y_RELACION_MENOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelationalOperators",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // RelationalOperators ::= OPERADOR_COMPARACION_Y_RELACION_MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelationalOperators",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // RelationalOperators ::= OPERADOR_COMPARACION_DIFERENTE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelationalOperators",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // RelationalOperators ::= OPERADOR_ARITMETICO_IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelationalOperators",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ArithmeticOperators ::= MOD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArithmeticOperators",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ArithmeticOperators ::= DIV 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArithmeticOperators",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ArithmeticOperators ::= OPERADOR_ARITMETICO_MULTIPLICACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArithmeticOperators",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ArithmeticOperators ::= OPERADOR_ARITMETICO_RESTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArithmeticOperators",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ArithmeticOperators ::= OPERADOR_ARITMETICO_SUMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArithmeticOperators",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Expresion ::= NUMERO_FLOTANTE_CIENTIFICO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Expresion ::= CHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Expresion ::= NUMERO_FLOTANTE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Expresion ::= NUMERO_ENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Expresion ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Sentencia_asignacion ::= IDENTIFICADOR OPERADOR_OTRO_ASSIGNMENT Expresion OPERADOR_OTRO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia_asignacion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Sentencia ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Sentencia ::= Sentencia_compuesta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Sentencia ::= Sentencia_case 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Sentencia ::= Sentencia_for 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Sentencia ::= Sentencia_repeat 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Sentencia ::= Sentencia_while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Sentencia ::= Sentencia_if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Sentencia ::= Sentencia_asignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Conj_Sent ::= Sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Conj_Sent",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Conj_Sent ::= Sentencia Conj_Sent 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Conj_Sent",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Sentencia_compuesta ::= BEGIN Conj_Sent END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia_compuesta",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Tipo ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tipo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Tipo ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tipo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Tipo ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tipo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Tipo ::= SHORTINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tipo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Tipo ::= REAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tipo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Tipo ::= LONGINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tipo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Tipo ::= CHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tipo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Lista_id ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lista_id",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Lista_id ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lista_id",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Lista_id ::= IDENTIFICADOR OPERADOR_OTRO_COMA Lista_id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lista_id",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Una_var ::= Lista_id OPERADOR_OTRO_DOS_PUNTOS Tipo OPERADOR_OTRO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Una_var",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Variables ::= Una_var 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Variables",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Variables ::= Una_var OPERADOR_OTRO_PUNTO_Y_COMA Variables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Variables",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Declaracion_var ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaracion_var",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Declaracion_var ::= VAR Variables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaracion_var",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Const_sin_signo ::= NUMERO_FLOTANTE_CIENTIFICO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const_sin_signo",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Const_sin_signo ::= NUMERO_FLOTANTE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const_sin_signo",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Const_sin_signo ::= NUMERO_ENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const_sin_signo",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Signo_opc ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Signo_opc",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Signo_opc ::= OPERADOR_ARITMETICO_RESTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Signo_opc",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Signo_opc ::= OPERADOR_ARITMETICO_SUMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Signo_opc",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Constante ::= CHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constante",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Constante ::= Signo_opc Const_sin_signo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constante",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Una_const ::= IDENTIFICADOR OPERADOR_ARITMETICO_IGUAL Constante 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Una_const",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Constantes ::= Una_const OPERADOR_OTRO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constantes",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Constantes ::= Una_const OPERADOR_OTRO_PUNTO_Y_COMA Constantes 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constantes",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Declaracion_const ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaracion_const",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Declaracion_const ::= CONST Constantes 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaracion_const",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ListaTipoFuncion ::= FuncionWrite 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListaTipoFuncion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ListaTipoFuncion ::= FuncionRead 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListaTipoFuncion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ListaTipoFuncion ::= Funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListaTipoFuncion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ListaTipoFuncion ::= ListaTipoFuncion FuncionRead 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListaTipoFuncion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ListaTipoFuncion ::= ListaTipoFuncion FuncionWrite 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListaTipoFuncion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ListaTipoFuncion ::= ListaTipoFuncion Funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListaTipoFuncion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Declaraciones ::= Declaracion_const Declaracion_var 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaraciones",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Funcion ::= FUNCTION IDENTIFICADOR OPERADOR_PARENTESIS_ABRE ListaParametros OPERADOR_PARENTESIS_CIERRA OPERADOR_OTRO_DOS_PUNTOS Tipo BEGIN Declaraciones Conj_Sent END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Funcion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Funcion ::= PROCEDURE IDENTIFICADOR OPERADOR_PARENTESIS_ABRE ListaParametros OPERADOR_PARENTESIS_CIERRA OPERADOR_OTRO_DOS_PUNTOS Tipo BEGIN Declaraciones Conj_Sent END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Funcion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // FuncionWrite ::= FUNCTION WRITE OPERADOR_PARENTESIS_ABRE Variables OPERADOR_PARENTESIS_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FuncionWrite",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // FuncionWrite ::= FUNCTION WRITE OPERADOR_PARENTESIS_ABRE Constantes OPERADOR_PARENTESIS_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FuncionWrite",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // FuncionRead ::= FUNCTION READ OPERADOR_PARENTESIS_ABRE OPERADOR_PARENTESIS_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FuncionRead",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // FuncionRead ::= FUNCTION READ OPERADOR_PARENTESIS_ABRE ListaParametros OPERADOR_PARENTESIS_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FuncionRead",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Cabecera ::= PROGRAM IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Cabecera",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Programa ::= Cabecera Declaraciones Sentencia_compuesta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Programa",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Programa ::= Cabecera Sentencia_compuesta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Programa",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Programa ::= Cabecera Declaraciones ListaTipoFuncion Sentencia_compuesta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Programa",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

