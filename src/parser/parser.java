
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Jun 03 20:53:09 CST 2013
//----------------------------------------------------

package parser;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Jun 03 20:53:09 CST 2013
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\136\000\002\002\004\000\002\003\006\000\002\003" +
    "\004\000\002\003\005\000\002\004\004\000\002\044\007" +
    "\000\002\044\006\000\002\045\007\000\002\045\007\000" +
    "\002\042\015\000\002\042\015\000\002\005\004\000\002" +
    "\006\004\000\002\006\003\000\002\007\005\000\002\007" +
    "\004\000\002\010\005\000\002\011\004\000\002\011\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\002\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\014\004\000\002\014\003\000\002\015\005\000\002\015" +
    "\003\000\002\016\006\000\002\017\005\000\002\017\003" +
    "\000\002\017\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\021\005\000\002\002" +
    "\004\000\002\002\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\023\006\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\024\003\000\002\036\003" +
    "\000\002\036\003\000\002\036\003\000\002\036\003\000" +
    "\002\036\003\000\002\037\003\000\002\037\003\000\002" +
    "\037\003\000\002\037\003\000\002\037\003\000\002\037" +
    "\003\000\002\040\005\000\002\040\005\000\002\025\011" +
    "\000\002\026\006\000\002\026\002\000\002\027\006\000" +
    "\002\030\006\000\002\031\013\000\002\032\007\000\002" +
    "\032\006\000\002\033\003\000\002\033\003\000\002\033" +
    "\003\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\034\007\000\002\035\004\000\002\041\004\000" +
    "\002\041\004\000\002\041\004\000\002\041\003\000\002" +
    "\041\003\000\002\041\003\000\002\043\006\000\002\043" +
    "\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\267\000\004\014\006\001\002\000\010\003\012\006" +
    "\014\025\011\001\002\000\004\002\010\001\002\000\004" +
    "\122\007\001\002\000\010\003\ufffd\006\ufffd\025\ufffd\001" +
    "\002\000\004\002\001\001\002\000\004\122\231\001\002" +
    "\000\006\003\ufff4\020\ufff4\001\002\000\010\006\014\015" +
    "\204\035\210\001\002\000\022\003\060\006\014\011\055" +
    "\023\061\033\047\053\045\062\046\122\063\001\002\000" +
    "\004\002\uffff\001\002\000\006\003\021\020\017\001\002" +
    "\000\006\003\023\122\025\001\002\000\026\003\ufff6\006" +
    "\ufff6\011\ufff6\015\ufff6\023\ufff6\033\ufff6\035\ufff6\053\ufff6" +
    "\062\ufff6\122\ufff6\001\002\000\026\003\uffe7\006\uffe7\011" +
    "\uffe7\015\uffe7\023\uffe7\033\uffe7\035\uffe7\053\uffe7\062\uffe7" +
    "\122\uffe7\001\002\000\004\106\033\001\002\000\004\106" +
    "\uffe1\001\002\000\032\003\uffe5\006\uffe5\011\uffe5\015\uffe5" +
    "\023\uffe5\033\uffe5\035\uffe5\053\uffe5\062\uffe5\071\031\074" +
    "\uffe5\122\uffe5\001\002\000\006\072\027\106\uffe2\001\002" +
    "\000\026\003\uffe8\006\uffe8\011\uffe8\015\uffe8\023\uffe8\033" +
    "\uffe8\035\uffe8\053\uffe8\062\uffe8\122\uffe8\001\002\000\006" +
    "\003\023\122\025\001\002\000\004\106\uffe3\001\002\000" +
    "\006\003\023\122\025\001\002\000\030\003\uffe6\006\uffe6" +
    "\011\uffe6\015\uffe6\023\uffe6\033\uffe6\035\uffe6\053\uffe6\062" +
    "\uffe6\074\uffe6\122\uffe6\001\002\000\020\021\042\024\041" +
    "\041\043\043\040\051\037\055\036\056\035\001\002\000" +
    "\004\071\044\001\002\000\010\006\uffdc\071\uffdc\122\uffdc" +
    "\001\002\000\010\006\uffdd\071\uffdd\122\uffdd\001\002\000" +
    "\010\006\uffde\071\uffde\122\uffde\001\002\000\010\006\uffdf" +
    "\071\uffdf\122\uffdf\001\002\000\010\006\uffe0\071\uffe0\122" +
    "\uffe0\001\002\000\010\006\uffdb\071\uffdb\122\uffdb\001\002" +
    "\000\010\006\uffda\071\uffda\122\uffda\001\002\000\032\003" +
    "\uffe4\006\uffe4\011\uffe4\015\uffe4\023\uffe4\033\uffe4\035\uffe4" +
    "\053\uffe4\062\uffe4\071\uffe4\074\uffe4\122\uffe4\001\002\000" +
    "\022\003\060\006\014\011\055\023\061\033\047\053\045" +
    "\062\046\122\063\001\002\000\014\024\073\122\070\123" +
    "\067\124\072\127\071\001\002\000\004\122\165\001\002" +
    "\000\026\003\uffd2\006\uffd2\010\uffd2\011\uffd2\023\uffd2\033" +
    "\uffd2\053\uffd2\061\uffd2\062\uffd2\122\uffd2\001\002\000\026" +
    "\003\uffd1\006\uffd1\010\uffd1\011\uffd1\023\uffd1\033\uffd1\053" +
    "\uffd1\061\uffd1\062\uffd1\122\uffd1\001\002\000\026\003\uffd3" +
    "\006\uffd3\010\uffd3\011\uffd3\023\uffd3\033\uffd3\053\uffd3\061" +
    "\uffd3\062\uffd3\122\uffd3\001\002\000\026\003\060\006\014" +
    "\010\uffd7\011\055\023\061\033\047\053\045\061\uffd7\062" +
    "\046\122\063\001\002\000\026\003\uffd5\006\uffd5\010\uffd5" +
    "\011\uffd5\023\uffd5\033\uffd5\053\uffd5\061\uffd5\062\uffd5\122" +
    "\uffd5\001\002\000\014\024\073\122\070\123\067\124\072" +
    "\127\071\001\002\000\026\003\uffd6\006\uffd6\010\uffd6\011" +
    "\uffd6\023\uffd6\033\uffd6\053\uffd6\061\uffd6\062\uffd6\122\uffd6" +
    "\001\002\000\026\003\uffd0\006\uffd0\010\uffd0\011\uffd0\023" +
    "\uffd0\033\uffd0\053\uffd0\061\uffd0\062\uffd0\122\uffd0\001\002" +
    "\000\026\003\uffcf\006\uffcf\010\uffcf\011\uffcf\023\uffcf\033" +
    "\uffcf\053\uffcf\061\uffcf\062\uffcf\122\uffcf\001\002\000\016" +
    "\024\101\066\102\067\077\123\uffec\124\uffec\127\uffec\001" +
    "\002\000\026\003\uffd4\006\uffd4\010\uffd4\011\uffd4\023\uffd4" +
    "\033\uffd4\053\uffd4\061\uffd4\062\uffd4\122\uffd4\001\002\000" +
    "\004\107\066\001\002\000\004\010\065\001\002\000\032" +
    "\002\uffd9\003\uffd9\006\uffd9\010\uffd9\011\uffd9\023\uffd9\033" +
    "\uffd9\053\uffd9\061\uffd9\062\uffd9\071\uffd9\122\uffd9\001\002" +
    "\000\014\024\073\122\070\123\067\124\072\127\071\001" +
    "\002\000\064\003\uffcb\006\uffcb\010\uffcb\011\uffcb\016\uffcb" +
    "\023\uffcb\026\uffcb\027\uffcb\033\uffcb\044\uffcb\053\uffcb\057" +
    "\uffcb\061\uffcb\062\uffcb\065\uffcb\066\uffcb\067\uffcb\071\uffcb" +
    "\077\uffcb\100\uffcb\101\uffcb\102\uffcb\103\uffcb\111\uffcb\122" +
    "\uffcb\001\002\000\064\003\uffcd\006\uffcd\010\uffcd\011\uffcd" +
    "\016\uffcd\023\uffcd\026\uffcd\027\uffcd\033\uffcd\044\uffcd\053" +
    "\uffcd\057\uffcd\061\uffcd\062\uffcd\065\uffcd\066\uffcd\067\uffcd" +
    "\071\uffcd\077\uffcd\100\uffcd\101\uffcd\102\uffcd\103\uffcd\111" +
    "\uffcd\122\uffcd\001\002\000\064\003\uffc9\006\uffc9\010\uffc9" +
    "\011\uffc9\016\uffc9\023\uffc9\026\uffc9\027\uffc9\033\uffc9\044" +
    "\uffc9\053\uffc9\057\uffc9\061\uffc9\062\uffc9\065\uffc9\066\uffc9" +
    "\067\uffc9\071\uffc9\077\uffc9\100\uffc9\101\uffc9\102\uffc9\103" +
    "\uffc9\111\uffc9\122\uffc9\001\002\000\064\003\uffcc\006\uffcc" +
    "\010\uffcc\011\uffcc\016\uffcc\023\uffcc\026\uffcc\027\uffcc\033" +
    "\uffcc\044\uffcc\053\uffcc\057\uffcc\061\uffcc\062\uffcc\065\uffcc" +
    "\066\uffcc\067\uffcc\071\uffcc\077\uffcc\100\uffcc\101\uffcc\102" +
    "\uffcc\103\uffcc\111\uffcc\122\uffcc\001\002\000\064\003\uffca" +
    "\006\uffca\010\uffca\011\uffca\016\uffca\023\uffca\026\uffca\027" +
    "\uffca\033\uffca\044\uffca\053\uffca\057\uffca\061\uffca\062\uffca" +
    "\065\uffca\066\uffca\067\uffca\071\uffca\077\uffca\100\uffca\101" +
    "\uffca\102\uffca\103\uffca\111\uffca\122\uffca\001\002\000\004" +
    "\071\075\001\002\000\030\003\uffce\006\uffce\010\uffce\011" +
    "\uffce\023\uffce\033\uffce\053\uffce\061\uffce\062\uffce\071\uffce" +
    "\122\uffce\001\002\000\010\123\126\124\131\127\130\001" +
    "\002\000\010\123\uffed\124\uffed\127\uffed\001\002\000\004" +
    "\012\103\001\002\000\010\012\uffef\071\uffef\106\uffef\001" +
    "\002\000\010\123\uffee\124\uffee\127\uffee\001\002\000\016" +
    "\024\101\066\102\067\077\123\uffec\124\uffec\127\uffec\001" +
    "\002\000\004\106\123\001\002\000\020\007\107\024\101" +
    "\066\102\067\077\123\uffec\124\uffec\127\uffec\001\002\000" +
    "\030\003\uffad\006\uffad\010\uffad\011\uffad\023\uffad\033\uffad" +
    "\053\uffad\061\uffad\062\uffad\071\uffad\122\uffad\001\002\000" +
    "\016\011\055\023\061\033\047\053\045\062\046\122\063" +
    "\001\002\000\004\106\111\001\002\000\016\011\055\023" +
    "\061\033\047\053\045\062\046\122\063\001\002\000\004" +
    "\071\121\001\002\000\030\003\uffae\006\uffae\010\uffae\011" +
    "\uffae\023\uffae\033\uffae\053\uffae\061\uffae\062\uffae\071\uffae" +
    "\122\uffae\001\002\000\030\003\uffaf\006\uffaf\010\uffaf\011" +
    "\uffaf\023\uffaf\033\uffaf\053\uffaf\061\uffaf\062\uffaf\071\uffaf" +
    "\122\uffaf\001\002\000\030\003\uffb0\006\uffb0\010\uffb0\011" +
    "\uffb0\023\uffb0\033\uffb0\053\uffb0\061\uffb0\062\uffb0\071\uffb0" +
    "\122\uffb0\001\002\000\030\003\uffb2\006\uffb2\010\uffb2\011" +
    "\uffb2\023\uffb2\033\uffb2\053\uffb2\061\uffb2\062\uffb2\071\uffb2" +
    "\122\uffb2\001\002\000\030\003\uffb3\006\uffb3\010\uffb3\011" +
    "\uffb3\023\uffb3\033\uffb3\053\uffb3\061\uffb3\062\uffb3\071\uffb3" +
    "\122\uffb3\001\002\000\030\003\uffb1\006\uffb1\010\uffb1\011" +
    "\uffb1\023\uffb1\033\uffb1\053\uffb1\061\uffb1\062\uffb1\071\uffb1" +
    "\122\uffb1\001\002\000\020\007\uffb5\024\uffb5\066\uffb5\067" +
    "\uffb5\123\uffb5\124\uffb5\127\uffb5\001\002\000\030\003\uffac" +
    "\006\uffac\010\uffac\011\uffac\023\uffac\033\uffac\053\uffac\061" +
    "\uffac\062\uffac\071\uffac\122\uffac\001\002\000\016\011\055" +
    "\023\061\033\047\053\045\062\046\122\063\001\002\000" +
    "\004\071\125\001\002\000\020\007\uffb4\024\uffb4\066\uffb4" +
    "\067\uffb4\123\uffb4\124\uffb4\127\uffb4\001\002\000\010\012" +
    "\uffea\071\uffea\106\uffea\001\002\000\010\012\ufff0\071\ufff0" +
    "\106\ufff0\001\002\000\010\012\uffe9\071\uffe9\106\uffe9\001" +
    "\002\000\010\012\uffeb\071\uffeb\106\uffeb\001\002\000\004" +
    "\016\153\001\002\000\030\026\146\044\143\065\136\066" +
    "\142\067\140\077\135\100\145\101\150\102\141\103\144" +
    "\111\147\001\002\000\014\024\073\122\070\123\067\124" +
    "\072\127\071\001\002\000\014\024\uffc3\122\uffc3\123\uffc3" +
    "\124\uffc3\127\uffc3\001\002\000\014\024\uffc6\122\uffc6\123" +
    "\uffc6\124\uffc6\127\uffc6\001\002\000\014\024\073\122\070" +
    "\123\067\124\072\127\071\001\002\000\014\024\uffc7\122" +
    "\uffc7\123\uffc7\124\uffc7\127\uffc7\001\002\000\014\024\uffbe" +
    "\122\uffbe\123\uffbe\124\uffbe\127\uffbe\001\002\000\014\024" +
    "\uffc8\122\uffc8\123\uffc8\124\uffc8\127\uffc8\001\002\000\014" +
    "\024\uffc4\122\uffc4\123\uffc4\124\uffc4\127\uffc4\001\002\000" +
    "\014\024\uffbf\122\uffbf\123\uffbf\124\uffbf\127\uffbf\001\002" +
    "\000\014\024\uffc0\122\uffc0\123\uffc0\124\uffc0\127\uffc0\001" +
    "\002\000\014\024\uffc5\122\uffc5\123\uffc5\124\uffc5\127\uffc5" +
    "\001\002\000\014\024\uffc2\122\uffc2\123\uffc2\124\uffc2\127" +
    "\uffc2\001\002\000\014\024\uffc1\122\uffc1\123\uffc1\124\uffc1" +
    "\127\uffc1\001\002\000\034\003\uffbd\006\uffbd\010\uffbd\011" +
    "\uffbd\016\uffbd\023\uffbd\027\uffbd\033\uffbd\053\uffbd\061\uffbd" +
    "\062\uffbd\071\uffbd\122\uffbd\001\002\000\034\003\uffbc\006" +
    "\uffbc\010\uffbc\011\uffbc\016\uffbc\023\uffbc\027\uffbc\033\uffbc" +
    "\053\uffbc\061\uffbc\062\uffbc\071\uffbc\122\uffbc\001\002\000" +
    "\004\006\154\001\002\000\022\003\060\006\014\011\055" +
    "\023\061\033\047\053\045\062\046\122\063\001\002\000" +
    "\004\010\156\001\002\000\032\003\uffb9\006\uffb9\007\160" +
    "\010\uffb9\011\uffb9\023\uffb9\033\uffb9\053\uffb9\061\uffb9\062" +
    "\uffb9\071\uffb9\122\uffb9\001\002\000\030\003\uffbb\006\uffbb" +
    "\010\uffbb\011\uffbb\023\uffbb\033\uffbb\053\uffbb\061\uffbb\062" +
    "\uffbb\071\uffbb\122\uffbb\001\002\000\004\006\161\001\002" +
    "\000\022\003\060\006\014\011\055\023\061\033\047\053" +
    "\045\062\046\122\063\001\002\000\004\010\163\001\002" +
    "\000\030\003\uffba\006\uffba\010\uffba\011\uffba\023\uffba\033" +
    "\uffba\053\uffba\061\uffba\062\uffba\071\uffba\122\uffba\001\002" +
    "\000\006\010\uffd8\061\uffd8\001\002\000\004\107\166\001" +
    "\002\000\014\024\073\122\070\123\067\124\072\127\071" +
    "\001\002\000\004\057\170\001\002\000\014\024\073\122" +
    "\070\123\067\124\072\127\071\001\002\000\004\027\172" +
    "\001\002\000\004\006\014\001\002\000\004\071\174\001" +
    "\002\000\030\003\uffb6\006\uffb6\010\uffb6\011\uffb6\023\uffb6" +
    "\033\uffb6\053\uffb6\061\uffb6\062\uffb6\071\uffb6\122\uffb6\001" +
    "\002\000\004\027\176\001\002\000\004\006\014\001\002" +
    "\000\030\003\uffb8\006\uffb8\010\uffb8\011\uffb8\023\uffb8\033" +
    "\uffb8\053\uffb8\061\uffb8\062\uffb8\071\uffb8\122\uffb8\001\002" +
    "\000\004\061\201\001\002\000\014\024\073\122\070\123" +
    "\067\124\072\127\071\001\002\000\030\003\uffb7\006\uffb7" +
    "\010\uffb7\011\uffb7\023\uffb7\033\uffb7\053\uffb7\061\uffb7\062" +
    "\uffb7\071\uffb7\122\uffb7\001\002\000\010\006\uffa7\015\uffa7" +
    "\035\uffa7\001\002\000\004\122\257\001\002\000\010\006" +
    "\uffa8\015\uffa8\035\uffa8\001\002\000\004\002\ufffe\001\002" +
    "\000\010\006\uffa6\015\uffa6\035\uffa6\001\002\000\010\050" +
    "\216\063\220\122\217\001\002\000\010\006\014\015\204" +
    "\035\210\001\002\000\010\006\uffa9\015\uffa9\035\uffa9\001" +
    "\002\000\010\006\uffab\015\uffab\035\uffab\001\002\000\010" +
    "\006\uffaa\015\uffaa\035\uffaa\001\002\000\004\002\000\001" +
    "\002\000\004\073\253\001\002\000\004\073\235\001\002" +
    "\000\004\073\221\001\002\000\006\003\023\122\223\001" +
    "\002\000\004\074\234\001\002\000\010\072\027\077\232" +
    "\106\uffe2\001\002\000\004\071\227\001\002\000\004\074" +
    "\226\001\002\000\010\006\ufff9\015\ufff9\035\ufff9\001\002" +
    "\000\012\003\ufff2\020\ufff2\074\ufff2\122\231\001\002\000" +
    "\010\003\ufff3\020\ufff3\074\ufff3\001\002\000\004\077\232" +
    "\001\002\000\016\024\101\066\102\067\077\123\uffec\124" +
    "\uffec\127\uffec\001\002\000\004\071\ufff1\001\002\000\010" +
    "\006\ufffa\015\ufffa\035\ufffa\001\002\000\020\021\042\024" +
    "\041\041\043\043\040\051\037\055\036\056\035\001\002" +
    "\000\004\122\252\001\002\000\022\021\042\024\041\041" +
    "\043\043\040\051\037\055\036\056\035\074\241\001\002" +
    "\000\004\122\250\001\002\000\004\106\242\001\002\000" +
    "\020\021\042\024\041\041\043\043\040\051\037\055\036" +
    "\056\035\001\002\000\004\006\244\001\002\000\006\003" +
    "\012\025\011\001\002\000\022\003\060\006\014\011\055" +
    "\023\061\033\047\053\045\062\046\122\063\001\002\000" +
    "\004\010\247\001\002\000\010\006\ufff7\015\ufff7\035\ufff7" +
    "\001\002\000\004\072\251\001\002\000\022\021\uffa5\024" +
    "\uffa5\041\uffa5\043\uffa5\051\uffa5\055\uffa5\056\uffa5\074\uffa5" +
    "\001\002\000\022\021\uffa4\024\uffa4\041\uffa4\043\uffa4\051" +
    "\uffa4\055\uffa4\056\uffa4\074\uffa4\001\002\000\022\021\042" +
    "\024\041\041\043\043\040\051\037\055\036\056\035\074" +
    "\255\001\002\000\022\021\042\024\041\041\043\043\040" +
    "\051\037\055\036\056\035\074\256\001\002\000\010\006" +
    "\ufffb\015\ufffb\035\ufffb\001\002\000\010\006\ufffc\015\ufffc" +
    "\035\ufffc\001\002\000\004\073\260\001\002\000\020\021" +
    "\042\024\041\041\043\043\040\051\037\055\036\056\035" +
    "\001\002\000\022\021\042\024\041\041\043\043\040\051" +
    "\037\055\036\056\035\074\262\001\002\000\004\106\263" +
    "\001\002\000\020\021\042\024\041\041\043\043\040\051" +
    "\037\055\036\056\035\001\002\000\004\006\265\001\002" +
    "\000\006\003\012\025\011\001\002\000\022\003\060\006" +
    "\014\011\055\023\061\033\047\053\045\062\046\122\063" +
    "\001\002\000\004\010\270\001\002\000\010\006\ufff8\015" +
    "\ufff8\035\ufff8\001\002\000\006\003\ufff5\020\ufff5\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\267\000\006\003\004\004\003\001\001\000\010\005" +
    "\012\006\015\021\014\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\270\010\223\001\001\000\002\001\001\000\014\021\205" +
    "\041\210\042\204\044\202\045\206\001\001\000\024\002" +
    "\063\021\056\022\052\023\055\025\053\027\061\030\051" +
    "\031\047\034\050\001\001\000\002\001\001\000\004\014" +
    "\017\001\001\000\010\015\025\016\023\017\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\027\001\001\000\002\001\001\000" +
    "\010\015\031\016\023\017\021\001\001\000\002\001\001" +
    "\000\004\020\033\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\002\177\021\056\022\052\023\055" +
    "\025\053\027\061\030\051\031\047\034\050\001\001\000" +
    "\006\024\132\040\174\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\002" +
    "\163\021\056\022\052\023\055\025\053\027\061\030\051" +
    "\031\047\034\050\001\001\000\002\001\001\000\006\024" +
    "\132\040\131\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\011\077\012\075\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\126\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\011\103\012\075\032" +
    "\104\001\001\000\002\001\001\000\010\011\107\012\075" +
    "\035\105\001\001\000\002\001\001\000\020\023\116\025" +
    "\115\027\117\030\114\031\113\033\121\034\112\001\001" +
    "\000\002\001\001\000\020\023\116\025\115\027\117\030" +
    "\114\031\113\033\111\034\112\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\023\116\025\115\027" +
    "\117\030\114\031\113\033\123\034\112\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\036\136\037\133\001\001\000\004\024\151\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\150" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\021\056\022\154\023\055\025\053\027\061\030\051\031" +
    "\047\034\050\001\001\000\002\001\001\000\004\026\156" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\021" +
    "\056\022\161\023\055\025\053\027\061\030\051\031\047" +
    "\034\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\024\166\001\001" +
    "\000\002\001\001\000\004\024\170\001\001\000\002\001" +
    "\001\000\004\021\172\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\176\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\024\132\040\201" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\021\214\042\212\044\211\045" +
    "\213\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\007\221\010\223\015\224" +
    "\016\023\017\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\007\227\010\223\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\011\232\012\075\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\020\235\043\236\001" +
    "\001\000\002\001\001\000\004\020\237\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\242\001\001\000" +
    "\002\001\001\000\006\005\244\006\015\001\001\000\024" +
    "\002\245\021\056\022\052\023\055\025\053\027\061\030" +
    "\051\031\047\034\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\020\235\043\253\001\001\000\004\020\237" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\020\235\043\260\001\001\000\004\020\237" +
    "\001\001\000\002\001\001\000\004\020\263\001\001\000" +
    "\002\001\001\000\006\005\265\006\015\001\001\000\024" +
    "\002\266\021\056\022\052\023\055\025\053\027\061\030" +
    "\051\031\047\034\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}






    public void syntax_error(Symbol cur_token) {
        report_error("Syntax error at line " + (cur_token.left+1) +
            ", column " + cur_token.right, null);
    }
public static void main(String args[]) throws Exception
    {
	new parser(new Lexer(System.in)).parse();
    } 
   


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ListaParametros ::= Tipo IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListaParametros",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ListaParametros ::= ListaParametros Tipo IDENTIFICADOR OPERADOR_OTRO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListaParametros",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ListaTipoFuncion ::= FuncionWrite 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListaTipoFuncion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ListaTipoFuncion ::= FuncionRead 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListaTipoFuncion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ListaTipoFuncion ::= Funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListaTipoFuncion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ListaTipoFuncion ::= ListaTipoFuncion FuncionRead 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListaTipoFuncion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ListaTipoFuncion ::= ListaTipoFuncion FuncionWrite 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListaTipoFuncion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ListaTipoFuncion ::= ListaTipoFuncion Funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListaTipoFuncion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Resto_case ::= ELSE SentenciaConstantesCase 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Resto_case",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Sentencia_case ::= CASE Constante OF ListaConstantesCase Resto_case 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia_case",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // SentenciaConstantesCase ::= Sentencia_case 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentenciaConstantesCase",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // SentenciaConstantesCase ::= Sentencia_for 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentenciaConstantesCase",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // SentenciaConstantesCase ::= Sentencia_repeat 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentenciaConstantesCase",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SentenciaConstantesCase ::= Sentencia_while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentenciaConstantesCase",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // SentenciaConstantesCase ::= Sentencia_if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentenciaConstantesCase",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SentenciaConstantesCase ::= Sentencia_asignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentenciaConstantesCase",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ListaConstantesCase ::= Constante OPERADOR_OTRO_DOS_PUNTOS SentenciaConstantesCase OPERADOR_OTRO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListaConstantesCase",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ListaConstantesCase ::= ListaConstantesCase Constante OPERADOR_OTRO_DOS_PUNTOS SentenciaConstantesCase OPERADOR_OTRO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListaConstantesCase",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Sentencia_for ::= FOR IDENTIFICADOR OPERADOR_OTRO_ASSIGNMENT Expresion TO Expresion DO Sentencia_compuesta OPERADOR_OTRO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia_for",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Sentencia_repeat ::= REPEAT Conj_Sent UNTIL Condicion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia_repeat",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Sentencia_while ::= WHILE Condicion DO Sentencia_compuesta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia_while",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Resto_if ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Resto_if",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Resto_if ::= ELSE BEGIN Sentencia END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Resto_if",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Sentencia_if ::= IF Condicion THEN BEGIN Sentencia END Resto_if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia_if",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Condicion ::= Expresion RelationalOperators Expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Condicion ::= Expresion ArithmeticOperators Expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // RelationalOperators ::= OPERADOR_COMPARACION_Y_RELACION_MENOR_IGUAL_EQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelationalOperators",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // RelationalOperators ::= OPERADOR_COMPARACION_Y_RELACION_MAYOR_IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelationalOperators",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // RelationalOperators ::= OPERADOR_COMPARACION_Y_RELACION_MENOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelationalOperators",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // RelationalOperators ::= OPERADOR_COMPARACION_Y_RELACION_MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelationalOperators",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // RelationalOperators ::= OPERADOR_COMPARACION_DIFERENTE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelationalOperators",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // RelationalOperators ::= OPERADOR_ARITMETICO_IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelationalOperators",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ArithmeticOperators ::= MOD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArithmeticOperators",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ArithmeticOperators ::= DIV 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArithmeticOperators",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ArithmeticOperators ::= OPERADOR_ARITMETICO_MULTIPLICACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArithmeticOperators",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ArithmeticOperators ::= OPERADOR_ARITMETICO_RESTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArithmeticOperators",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ArithmeticOperators ::= OPERADOR_ARITMETICO_SUMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArithmeticOperators",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Expresion ::= NUMERO_FLOTANTE_CIENTIFICO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Expresion ::= CHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Expresion ::= NUMERO_FLOTANTE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Expresion ::= NUMERO_ENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Expresion ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Sentencia_asignacion ::= IDENTIFICADOR OPERADOR_OTRO_ASSIGNMENT Expresion OPERADOR_OTRO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia_asignacion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Sentencia ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Sentencia ::= Sentencia_compuesta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Sentencia ::= Sentencia_case 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Sentencia ::= Sentencia_for 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Sentencia ::= Sentencia_repeat 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Sentencia ::= Sentencia_while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Sentencia ::= Sentencia_if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Sentencia ::= Sentencia_asignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Conj_Sent ::= Sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Conj_Sent",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Conj_Sent ::= Sentencia Conj_Sent 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Conj_Sent",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Sentencia_compuesta ::= BEGIN Conj_Sent END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia_compuesta",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Tipo ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tipo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Tipo ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tipo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Tipo ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tipo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Tipo ::= SHORTINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tipo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Tipo ::= REAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tipo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Tipo ::= LONGINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tipo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Tipo ::= CHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tipo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Lista_id ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lista_id",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Lista_id ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lista_id",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Lista_id ::= IDENTIFICADOR OPERADOR_OTRO_COMA Lista_id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lista_id",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Una_var ::= Lista_id OPERADOR_OTRO_DOS_PUNTOS Tipo OPERADOR_OTRO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Una_var",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Variables ::= Una_var 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Variables",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Variables ::= Una_var OPERADOR_OTRO_PUNTO_Y_COMA Variables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Variables",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Declaracion_var ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaracion_var",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Declaracion_var ::= VAR Variables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaracion_var",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Const_sin_signo ::= NUMERO_FLOTANTE_CIENTIFICO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const_sin_signo",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Const_sin_signo ::= NUMERO_FLOTANTE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const_sin_signo",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Const_sin_signo ::= NUMERO_ENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const_sin_signo",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Signo_opc ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Signo_opc",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Signo_opc ::= OPERADOR_ARITMETICO_RESTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Signo_opc",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Signo_opc ::= OPERADOR_ARITMETICO_SUMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Signo_opc",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Constante ::= CHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constante",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Constante ::= Signo_opc Const_sin_signo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constante",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Una_const ::= IDENTIFICADOR OPERADOR_ARITMETICO_IGUAL Constante 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Una_const",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Constantes ::= Una_const OPERADOR_OTRO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constantes",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Constantes ::= Una_const OPERADOR_OTRO_PUNTO_Y_COMA Constantes 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constantes",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Declaracion_const ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaracion_const",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Declaracion_const ::= CONST Constantes 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaracion_const",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Declaraciones ::= Declaracion_const Declaracion_var 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaraciones",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Funcion ::= FUNCTION IDENTIFICADOR OPERADOR_PARENTESIS_ABRE ListaParametros OPERADOR_PARENTESIS_CIERRA OPERADOR_OTRO_DOS_PUNTOS Tipo BEGIN Declaraciones Conj_Sent END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Funcion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Funcion ::= PROCEDURE IDENTIFICADOR OPERADOR_PARENTESIS_ABRE ListaParametros OPERADOR_PARENTESIS_CIERRA OPERADOR_OTRO_DOS_PUNTOS Tipo BEGIN Declaraciones Conj_Sent END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Funcion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // FuncionWrite ::= FUNCTION WRITE OPERADOR_PARENTESIS_ABRE Variables OPERADOR_PARENTESIS_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FuncionWrite",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // FuncionWrite ::= FUNCTION WRITE OPERADOR_PARENTESIS_ABRE Constantes OPERADOR_PARENTESIS_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FuncionWrite",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // FuncionRead ::= FUNCTION READ OPERADOR_PARENTESIS_ABRE OPERADOR_PARENTESIS_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FuncionRead",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // FuncionRead ::= FUNCTION READ OPERADOR_PARENTESIS_ABRE ListaParametros OPERADOR_PARENTESIS_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FuncionRead",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Cabecera ::= PROGRAM IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Cabecera",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Programa ::= Cabecera Declaraciones Sentencia_compuesta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Programa",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Programa ::= Cabecera Sentencia_compuesta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Programa",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Programa ::= Cabecera Declaraciones ListaTipoFuncion Sentencia_compuesta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Programa",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

