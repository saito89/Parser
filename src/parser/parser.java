
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Jun 03 11:53:10 CST 2013
//----------------------------------------------------

package parser;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Jun 03 11:53:10 CST 2013
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\133\000\002\002\004\000\002\003\006\000\002\004" +
    "\004\000\002\044\007\000\002\044\006\000\002\045\007" +
    "\000\002\045\007\000\002\042\015\000\002\042\015\000" +
    "\002\005\004\000\002\006\004\000\002\006\003\000\002" +
    "\007\005\000\002\007\004\000\002\010\005\000\002\011" +
    "\004\000\002\011\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\002\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\014\004\000\002\014\003\000\002" +
    "\015\005\000\002\015\003\000\002\016\006\000\002\017" +
    "\005\000\002\017\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\021\005\000\002" +
    "\002\004\000\002\002\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\023\006\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\036" +
    "\003\000\002\036\003\000\002\036\003\000\002\036\003" +
    "\000\002\036\003\000\002\037\003\000\002\037\003\000" +
    "\002\037\003\000\002\037\003\000\002\037\003\000\002" +
    "\037\003\000\002\040\005\000\002\040\005\000\002\025" +
    "\011\000\002\026\006\000\002\026\002\000\002\027\006" +
    "\000\002\030\006\000\002\031\013\000\002\032\007\000" +
    "\002\032\006\000\002\033\003\000\002\033\003\000\002" +
    "\033\003\000\002\033\003\000\002\033\003\000\002\033" +
    "\003\000\002\034\007\000\002\035\004\000\002\041\004" +
    "\000\002\041\004\000\002\041\004\000\002\041\003\000" +
    "\002\041\003\000\002\041\003\000\002\043\006\000\002" +
    "\043\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\264\000\004\014\006\001\002\000\006\003\012\025" +
    "\011\001\002\000\004\002\010\001\002\000\004\122\007" +
    "\001\002\000\006\003\uffff\025\uffff\001\002\000\004\002" +
    "\001\001\002\000\004\122\226\001\002\000\006\003\ufff6" +
    "\020\ufff6\001\002\000\006\015\043\035\046\001\002\000" +
    "\006\003\017\020\015\001\002\000\004\122\022\001\002" +
    "\000\026\003\ufff8\006\ufff8\011\ufff8\015\ufff8\023\ufff8\033" +
    "\ufff8\035\ufff8\053\ufff8\062\ufff8\122\ufff8\001\002\000\026" +
    "\003\uffe9\006\uffe9\011\uffe9\015\uffe9\023\uffe9\033\uffe9\035" +
    "\uffe9\053\uffe9\062\uffe9\122\uffe9\001\002\000\032\003\uffe7" +
    "\006\uffe7\011\uffe7\015\uffe7\023\uffe7\033\uffe7\035\uffe7\053" +
    "\uffe7\062\uffe7\071\040\074\uffe7\122\uffe7\001\002\000\004" +
    "\106\026\001\002\000\006\072\024\106\uffe4\001\002\000" +
    "\026\003\uffea\006\uffea\011\uffea\015\uffea\023\uffea\033\uffea" +
    "\035\uffea\053\uffea\062\uffea\122\uffea\001\002\000\004\122" +
    "\022\001\002\000\004\106\uffe5\001\002\000\020\021\034" +
    "\024\035\041\036\043\033\051\032\055\031\056\030\001" +
    "\002\000\004\071\037\001\002\000\010\006\uffdf\071\uffdf" +
    "\122\uffdf\001\002\000\010\006\uffe0\071\uffe0\122\uffe0\001" +
    "\002\000\010\006\uffe1\071\uffe1\122\uffe1\001\002\000\010" +
    "\006\uffe2\071\uffe2\122\uffe2\001\002\000\010\006\uffde\071" +
    "\uffde\122\uffde\001\002\000\010\006\uffe3\071\uffe3\122\uffe3" +
    "\001\002\000\010\006\uffdd\071\uffdd\122\uffdd\001\002\000" +
    "\032\003\uffe6\006\uffe6\011\uffe6\015\uffe6\023\uffe6\033\uffe6" +
    "\035\uffe6\053\uffe6\062\uffe6\071\uffe6\074\uffe6\122\uffe6\001" +
    "\002\000\004\122\022\001\002\000\030\003\uffe8\006\uffe8" +
    "\011\uffe8\015\uffe8\023\uffe8\033\uffe8\035\uffe8\053\uffe8\062" +
    "\uffe8\074\uffe8\122\uffe8\001\002\000\010\006\uffaa\015\uffaa" +
    "\035\uffaa\001\002\000\004\122\254\001\002\000\010\006" +
    "\uffab\015\uffab\035\uffab\001\002\000\010\006\uffa9\015\uffa9" +
    "\035\uffa9\001\002\000\010\050\213\063\215\122\214\001" +
    "\002\000\010\006\051\015\043\035\046\001\002\000\010" +
    "\006\uffac\015\uffac\035\uffac\001\002\000\022\003\067\006" +
    "\051\011\065\023\071\033\057\053\055\062\056\122\074" +
    "\001\002\000\010\006\uffae\015\uffae\035\uffae\001\002\000" +
    "\010\006\uffad\015\uffad\035\uffad\001\002\000\004\002\000" +
    "\001\002\000\022\003\067\006\051\011\065\023\071\033" +
    "\057\053\055\062\056\122\074\001\002\000\014\024\102" +
    "\122\077\123\076\124\101\127\100\001\002\000\004\122" +
    "\175\001\002\000\026\003\uffd5\006\uffd5\010\uffd5\011\uffd5" +
    "\023\uffd5\033\uffd5\053\uffd5\061\uffd5\062\uffd5\122\uffd5\001" +
    "\002\000\026\003\uffd4\006\uffd4\010\uffd4\011\uffd4\023\uffd4" +
    "\033\uffd4\053\uffd4\061\uffd4\062\uffd4\122\uffd4\001\002\000" +
    "\026\003\uffd6\006\uffd6\010\uffd6\011\uffd6\023\uffd6\033\uffd6" +
    "\053\uffd6\061\uffd6\062\uffd6\122\uffd6\001\002\000\026\003" +
    "\067\006\051\010\uffda\011\065\023\071\033\057\053\055" +
    "\061\uffda\062\056\122\074\001\002\000\026\003\uffd8\006" +
    "\uffd8\010\uffd8\011\uffd8\023\uffd8\033\uffd8\053\uffd8\061\uffd8" +
    "\062\uffd8\122\uffd8\001\002\000\014\024\102\122\077\123" +
    "\076\124\101\127\100\001\002\000\026\003\uffd9\006\uffd9" +
    "\010\uffd9\011\uffd9\023\uffd9\033\uffd9\053\uffd9\061\uffd9\062" +
    "\uffd9\122\uffd9\001\002\000\026\003\uffd2\006\uffd2\010\uffd2" +
    "\011\uffd2\023\uffd2\033\uffd2\053\uffd2\061\uffd2\062\uffd2\122" +
    "\uffd2\001\002\000\026\003\uffd3\006\uffd3\010\uffd3\011\uffd3" +
    "\023\uffd3\033\uffd3\053\uffd3\061\uffd3\062\uffd3\122\uffd3\001" +
    "\002\000\016\024\112\066\111\067\107\123\uffee\124\uffee" +
    "\127\uffee\001\002\000\026\003\uffd7\006\uffd7\010\uffd7\011" +
    "\uffd7\023\uffd7\033\uffd7\053\uffd7\061\uffd7\062\uffd7\122\uffd7" +
    "\001\002\000\004\010\105\001\002\000\004\107\075\001" +
    "\002\000\014\024\102\122\077\123\076\124\101\127\100" +
    "\001\002\000\064\003\uffce\006\uffce\010\uffce\011\uffce\016" +
    "\uffce\023\uffce\026\uffce\027\uffce\033\uffce\044\uffce\053\uffce" +
    "\057\uffce\061\uffce\062\uffce\065\uffce\066\uffce\067\uffce\071" +
    "\uffce\077\uffce\100\uffce\101\uffce\102\uffce\103\uffce\111\uffce" +
    "\122\uffce\001\002\000\064\003\uffd0\006\uffd0\010\uffd0\011" +
    "\uffd0\016\uffd0\023\uffd0\026\uffd0\027\uffd0\033\uffd0\044\uffd0" +
    "\053\uffd0\057\uffd0\061\uffd0\062\uffd0\065\uffd0\066\uffd0\067" +
    "\uffd0\071\uffd0\077\uffd0\100\uffd0\101\uffd0\102\uffd0\103\uffd0" +
    "\111\uffd0\122\uffd0\001\002\000\064\003\uffcc\006\uffcc\010" +
    "\uffcc\011\uffcc\016\uffcc\023\uffcc\026\uffcc\027\uffcc\033\uffcc" +
    "\044\uffcc\053\uffcc\057\uffcc\061\uffcc\062\uffcc\065\uffcc\066" +
    "\uffcc\067\uffcc\071\uffcc\077\uffcc\100\uffcc\101\uffcc\102\uffcc" +
    "\103\uffcc\111\uffcc\122\uffcc\001\002\000\064\003\uffcf\006" +
    "\uffcf\010\uffcf\011\uffcf\016\uffcf\023\uffcf\026\uffcf\027\uffcf" +
    "\033\uffcf\044\uffcf\053\uffcf\057\uffcf\061\uffcf\062\uffcf\065" +
    "\uffcf\066\uffcf\067\uffcf\071\uffcf\077\uffcf\100\uffcf\101\uffcf" +
    "\102\uffcf\103\uffcf\111\uffcf\122\uffcf\001\002\000\064\003" +
    "\uffcd\006\uffcd\010\uffcd\011\uffcd\016\uffcd\023\uffcd\026\uffcd" +
    "\027\uffcd\033\uffcd\044\uffcd\053\uffcd\057\uffcd\061\uffcd\062" +
    "\uffcd\065\uffcd\066\uffcd\067\uffcd\071\uffcd\077\uffcd\100\uffcd" +
    "\101\uffcd\102\uffcd\103\uffcd\111\uffcd\122\uffcd\001\002\000" +
    "\004\071\104\001\002\000\030\003\uffd1\006\uffd1\010\uffd1" +
    "\011\uffd1\023\uffd1\033\uffd1\053\uffd1\061\uffd1\062\uffd1\071" +
    "\uffd1\122\uffd1\001\002\000\032\002\uffdc\003\uffdc\006\uffdc" +
    "\010\uffdc\011\uffdc\023\uffdc\033\uffdc\053\uffdc\061\uffdc\062" +
    "\uffdc\071\uffdc\122\uffdc\001\002\000\010\123\136\124\141" +
    "\127\140\001\002\000\010\123\uffef\124\uffef\127\uffef\001" +
    "\002\000\004\012\113\001\002\000\010\123\ufff0\124\ufff0" +
    "\127\ufff0\001\002\000\010\012\ufff1\071\ufff1\106\ufff1\001" +
    "\002\000\016\024\112\066\111\067\107\123\uffee\124\uffee" +
    "\127\uffee\001\002\000\004\106\133\001\002\000\020\007" +
    "\117\024\112\066\111\067\107\123\uffee\124\uffee\127\uffee" +
    "\001\002\000\030\003\uffb0\006\uffb0\010\uffb0\011\uffb0\023" +
    "\uffb0\033\uffb0\053\uffb0\061\uffb0\062\uffb0\071\uffb0\122\uffb0" +
    "\001\002\000\016\011\065\023\071\033\057\053\055\062" +
    "\056\122\074\001\002\000\004\106\121\001\002\000\016" +
    "\011\065\023\071\033\057\053\055\062\056\122\074\001" +
    "\002\000\004\071\131\001\002\000\030\003\uffb1\006\uffb1" +
    "\010\uffb1\011\uffb1\023\uffb1\033\uffb1\053\uffb1\061\uffb1\062" +
    "\uffb1\071\uffb1\122\uffb1\001\002\000\030\003\uffb2\006\uffb2" +
    "\010\uffb2\011\uffb2\023\uffb2\033\uffb2\053\uffb2\061\uffb2\062" +
    "\uffb2\071\uffb2\122\uffb2\001\002\000\030\003\uffb3\006\uffb3" +
    "\010\uffb3\011\uffb3\023\uffb3\033\uffb3\053\uffb3\061\uffb3\062" +
    "\uffb3\071\uffb3\122\uffb3\001\002\000\030\003\uffb5\006\uffb5" +
    "\010\uffb5\011\uffb5\023\uffb5\033\uffb5\053\uffb5\061\uffb5\062" +
    "\uffb5\071\uffb5\122\uffb5\001\002\000\030\003\uffb6\006\uffb6" +
    "\010\uffb6\011\uffb6\023\uffb6\033\uffb6\053\uffb6\061\uffb6\062" +
    "\uffb6\071\uffb6\122\uffb6\001\002\000\030\003\uffb4\006\uffb4" +
    "\010\uffb4\011\uffb4\023\uffb4\033\uffb4\053\uffb4\061\uffb4\062" +
    "\uffb4\071\uffb4\122\uffb4\001\002\000\020\007\uffb8\024\uffb8" +
    "\066\uffb8\067\uffb8\123\uffb8\124\uffb8\127\uffb8\001\002\000" +
    "\030\003\uffaf\006\uffaf\010\uffaf\011\uffaf\023\uffaf\033\uffaf" +
    "\053\uffaf\061\uffaf\062\uffaf\071\uffaf\122\uffaf\001\002\000" +
    "\016\011\065\023\071\033\057\053\055\062\056\122\074" +
    "\001\002\000\004\071\135\001\002\000\020\007\uffb7\024" +
    "\uffb7\066\uffb7\067\uffb7\123\uffb7\124\uffb7\127\uffb7\001\002" +
    "\000\010\012\uffec\071\uffec\106\uffec\001\002\000\010\012" +
    "\ufff2\071\ufff2\106\ufff2\001\002\000\010\012\uffeb\071\uffeb" +
    "\106\uffeb\001\002\000\010\012\uffed\071\uffed\106\uffed\001" +
    "\002\000\004\016\163\001\002\000\030\026\156\044\153" +
    "\065\146\066\152\067\150\077\145\100\155\101\160\102" +
    "\151\103\154\111\157\001\002\000\014\024\102\122\077" +
    "\123\076\124\101\127\100\001\002\000\014\024\uffc6\122" +
    "\uffc6\123\uffc6\124\uffc6\127\uffc6\001\002\000\014\024\uffc9" +
    "\122\uffc9\123\uffc9\124\uffc9\127\uffc9\001\002\000\014\024" +
    "\102\122\077\123\076\124\101\127\100\001\002\000\014" +
    "\024\uffca\122\uffca\123\uffca\124\uffca\127\uffca\001\002\000" +
    "\014\024\uffc1\122\uffc1\123\uffc1\124\uffc1\127\uffc1\001\002" +
    "\000\014\024\uffcb\122\uffcb\123\uffcb\124\uffcb\127\uffcb\001" +
    "\002\000\014\024\uffc7\122\uffc7\123\uffc7\124\uffc7\127\uffc7" +
    "\001\002\000\014\024\uffc2\122\uffc2\123\uffc2\124\uffc2\127" +
    "\uffc2\001\002\000\014\024\uffc3\122\uffc3\123\uffc3\124\uffc3" +
    "\127\uffc3\001\002\000\014\024\uffc8\122\uffc8\123\uffc8\124" +
    "\uffc8\127\uffc8\001\002\000\014\024\uffc5\122\uffc5\123\uffc5" +
    "\124\uffc5\127\uffc5\001\002\000\014\024\uffc4\122\uffc4\123" +
    "\uffc4\124\uffc4\127\uffc4\001\002\000\034\003\uffc0\006\uffc0" +
    "\010\uffc0\011\uffc0\016\uffc0\023\uffc0\027\uffc0\033\uffc0\053" +
    "\uffc0\061\uffc0\062\uffc0\071\uffc0\122\uffc0\001\002\000\034" +
    "\003\uffbf\006\uffbf\010\uffbf\011\uffbf\016\uffbf\023\uffbf\027" +
    "\uffbf\033\uffbf\053\uffbf\061\uffbf\062\uffbf\071\uffbf\122\uffbf" +
    "\001\002\000\004\006\164\001\002\000\022\003\067\006" +
    "\051\011\065\023\071\033\057\053\055\062\056\122\074" +
    "\001\002\000\004\010\166\001\002\000\032\003\uffbc\006" +
    "\uffbc\007\170\010\uffbc\011\uffbc\023\uffbc\033\uffbc\053\uffbc" +
    "\061\uffbc\062\uffbc\071\uffbc\122\uffbc\001\002\000\030\003" +
    "\uffbe\006\uffbe\010\uffbe\011\uffbe\023\uffbe\033\uffbe\053\uffbe" +
    "\061\uffbe\062\uffbe\071\uffbe\122\uffbe\001\002\000\004\006" +
    "\171\001\002\000\022\003\067\006\051\011\065\023\071" +
    "\033\057\053\055\062\056\122\074\001\002\000\004\010" +
    "\173\001\002\000\030\003\uffbd\006\uffbd\010\uffbd\011\uffbd" +
    "\023\uffbd\033\uffbd\053\uffbd\061\uffbd\062\uffbd\071\uffbd\122" +
    "\uffbd\001\002\000\006\010\uffdb\061\uffdb\001\002\000\004" +
    "\107\176\001\002\000\014\024\102\122\077\123\076\124" +
    "\101\127\100\001\002\000\004\057\200\001\002\000\014" +
    "\024\102\122\077\123\076\124\101\127\100\001\002\000" +
    "\004\027\202\001\002\000\004\006\051\001\002\000\004" +
    "\071\204\001\002\000\030\003\uffb9\006\uffb9\010\uffb9\011" +
    "\uffb9\023\uffb9\033\uffb9\053\uffb9\061\uffb9\062\uffb9\071\uffb9" +
    "\122\uffb9\001\002\000\004\027\206\001\002\000\004\006" +
    "\051\001\002\000\030\003\uffbb\006\uffbb\010\uffbb\011\uffbb" +
    "\023\uffbb\033\uffbb\053\uffbb\061\uffbb\062\uffbb\071\uffbb\122" +
    "\uffbb\001\002\000\004\061\211\001\002\000\014\024\102" +
    "\122\077\123\076\124\101\127\100\001\002\000\030\003" +
    "\uffba\006\uffba\010\uffba\011\uffba\023\uffba\033\uffba\053\uffba" +
    "\061\uffba\062\uffba\071\uffba\122\uffba\001\002\000\004\073" +
    "\250\001\002\000\004\073\232\001\002\000\004\073\216" +
    "\001\002\000\004\122\220\001\002\000\004\074\231\001" +
    "\002\000\010\072\024\077\227\106\uffe4\001\002\000\004" +
    "\071\224\001\002\000\004\074\223\001\002\000\010\006" +
    "\ufffb\015\ufffb\035\ufffb\001\002\000\012\003\ufff4\020\ufff4" +
    "\074\ufff4\122\226\001\002\000\010\003\ufff5\020\ufff5\074" +
    "\ufff5\001\002\000\004\077\227\001\002\000\016\024\112" +
    "\066\111\067\107\123\uffee\124\uffee\127\uffee\001\002\000" +
    "\004\071\ufff3\001\002\000\010\006\ufffc\015\ufffc\035\ufffc" +
    "\001\002\000\020\021\034\024\035\041\036\043\033\051" +
    "\032\055\031\056\030\001\002\000\004\122\247\001\002" +
    "\000\022\021\034\024\035\041\036\043\033\051\032\055" +
    "\031\056\030\074\236\001\002\000\004\122\245\001\002" +
    "\000\004\106\237\001\002\000\020\021\034\024\035\041" +
    "\036\043\033\051\032\055\031\056\030\001\002\000\004" +
    "\006\241\001\002\000\006\003\012\025\011\001\002\000" +
    "\022\003\067\006\051\011\065\023\071\033\057\053\055" +
    "\062\056\122\074\001\002\000\004\010\244\001\002\000" +
    "\010\006\ufff9\015\ufff9\035\ufff9\001\002\000\004\072\246" +
    "\001\002\000\022\021\uffa8\024\uffa8\041\uffa8\043\uffa8\051" +
    "\uffa8\055\uffa8\056\uffa8\074\uffa8\001\002\000\022\021\uffa7" +
    "\024\uffa7\041\uffa7\043\uffa7\051\uffa7\055\uffa7\056\uffa7\074" +
    "\uffa7\001\002\000\022\021\034\024\035\041\036\043\033" +
    "\051\032\055\031\056\030\074\252\001\002\000\022\021" +
    "\034\024\035\041\036\043\033\051\032\055\031\056\030" +
    "\074\253\001\002\000\010\006\ufffd\015\ufffd\035\ufffd\001" +
    "\002\000\010\006\ufffe\015\ufffe\035\ufffe\001\002\000\004" +
    "\073\255\001\002\000\020\021\034\024\035\041\036\043" +
    "\033\051\032\055\031\056\030\001\002\000\022\021\034" +
    "\024\035\041\036\043\033\051\032\055\031\056\030\074" +
    "\257\001\002\000\004\106\260\001\002\000\020\021\034" +
    "\024\035\041\036\043\033\051\032\055\031\056\030\001" +
    "\002\000\004\006\262\001\002\000\006\003\012\025\011" +
    "\001\002\000\022\003\067\006\051\011\065\023\071\033" +
    "\057\053\055\062\056\122\074\001\002\000\004\010\265" +
    "\001\002\000\010\006\ufffa\015\ufffa\035\ufffa\001\002\000" +
    "\006\003\ufff7\020\ufff7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\264\000\006\003\004\004\003\001\001\000\006\005" +
    "\012\006\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\265\010" +
    "\220\001\001\000\002\001\001\000\012\041\046\042\043" +
    "\044\041\045\044\001\001\000\004\014\015\001\001\000" +
    "\010\015\022\016\017\017\020\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\024\001\001" +
    "\000\002\001\001\000\004\020\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\015\040\016\017" +
    "\017\020\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\021\053\042\051\044\047\045\052\001" +
    "\001\000\002\001\001\000\024\002\072\021\067\022\062" +
    "\023\065\025\063\027\071\030\061\031\057\034\060\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\002\207\021\067\022\062\023\065\025\063\027" +
    "\071\030\061\031\057\034\060\001\001\000\006\024\142" +
    "\040\204\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\002\173\021\067" +
    "\022\062\023\065\025\063\027\071\030\061\031\057\034" +
    "\060\001\001\000\002\001\001\000\006\024\142\040\141" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\011\107\012\105\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\102\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\136\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\011\113\012\105\032\114\001\001" +
    "\000\002\001\001\000\010\011\117\012\105\035\115\001" +
    "\001\000\002\001\001\000\020\023\126\025\125\027\127" +
    "\030\124\031\123\033\131\034\122\001\001\000\002\001" +
    "\001\000\020\023\126\025\125\027\127\030\124\031\123" +
    "\033\121\034\122\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\023\126\025\125\027\127\030\124" +
    "\031\123\033\133\034\122\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\036" +
    "\146\037\143\001\001\000\004\024\161\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\024\160\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\021\067\022" +
    "\164\023\065\025\063\027\071\030\061\031\057\034\060" +
    "\001\001\000\002\001\001\000\004\026\166\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\021\067\022\171" +
    "\023\065\025\063\027\071\030\061\031\057\034\060\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\024\176\001\001\000\002\001" +
    "\001\000\004\024\200\001\001\000\002\001\001\000\004" +
    "\021\202\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\206\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\024\142\040\211\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\007\216\010\220\015\221\016\017\017" +
    "\020\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\224\010\220\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\011\227\012\105\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\020\232\043\233\001\001\000\002" +
    "\001\001\000\004\020\234\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\237\001\001\000\002\001\001" +
    "\000\006\005\241\006\013\001\001\000\024\002\242\021" +
    "\067\022\062\023\065\025\063\027\071\030\061\031\057" +
    "\034\060\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\020\232\043\250\001\001\000\004\020\234\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\020\232\043\255\001\001\000\004\020\234\001\001\000" +
    "\002\001\001\000\004\020\260\001\001\000\002\001\001" +
    "\000\006\005\262\006\013\001\001\000\024\002\263\021" +
    "\067\022\062\023\065\025\063\027\071\030\061\031\057" +
    "\034\060\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}






    public void syntax_error(Symbol cur_token) {
        report_error("Syntax error at line " + (cur_token.left+1) +
            ", column " + cur_token.right, null);
    }
public static void main(String args[]) throws Exception
    {
	new parser(new Lexer(System.in)).parse();
    } 
   


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ListaParametros ::= Tipo IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListaParametros",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ListaParametros ::= ListaParametros Tipo IDENTIFICADOR OPERADOR_OTRO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListaParametros",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ListaTipoFuncion ::= FuncionWrite 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListaTipoFuncion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ListaTipoFuncion ::= FuncionRead 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListaTipoFuncion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ListaTipoFuncion ::= Funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListaTipoFuncion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ListaTipoFuncion ::= ListaTipoFuncion FuncionRead 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListaTipoFuncion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ListaTipoFuncion ::= ListaTipoFuncion FuncionWrite 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListaTipoFuncion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ListaTipoFuncion ::= ListaTipoFuncion Funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListaTipoFuncion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Resto_case ::= ELSE SentenciaConstantesCase 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Resto_case",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Sentencia_case ::= CASE Constante OF ListaConstantesCase Resto_case 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia_case",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SentenciaConstantesCase ::= Sentencia_case 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentenciaConstantesCase",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // SentenciaConstantesCase ::= Sentencia_for 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentenciaConstantesCase",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SentenciaConstantesCase ::= Sentencia_repeat 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentenciaConstantesCase",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SentenciaConstantesCase ::= Sentencia_while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentenciaConstantesCase",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SentenciaConstantesCase ::= Sentencia_if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentenciaConstantesCase",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SentenciaConstantesCase ::= Sentencia_asignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentenciaConstantesCase",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ListaConstantesCase ::= Constante OPERADOR_OTRO_DOS_PUNTOS SentenciaConstantesCase OPERADOR_OTRO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListaConstantesCase",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ListaConstantesCase ::= ListaConstantesCase Constante OPERADOR_OTRO_DOS_PUNTOS SentenciaConstantesCase OPERADOR_OTRO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListaConstantesCase",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Sentencia_for ::= FOR IDENTIFICADOR OPERADOR_OTRO_ASSIGNMENT Expresion TO Expresion DO Sentencia_compuesta OPERADOR_OTRO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia_for",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Sentencia_repeat ::= REPEAT Conj_Sent UNTIL Condicion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia_repeat",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Sentencia_while ::= WHILE Condicion DO Sentencia_compuesta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia_while",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Resto_if ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Resto_if",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Resto_if ::= ELSE BEGIN Sentencia END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Resto_if",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Sentencia_if ::= IF Condicion THEN BEGIN Sentencia END Resto_if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia_if",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Condicion ::= Expresion RelationalOperators Expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Condicion ::= Expresion ArithmeticOperators Expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // RelationalOperators ::= OPERADOR_COMPARACION_Y_RELACION_MENOR_IGUAL_EQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelationalOperators",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // RelationalOperators ::= OPERADOR_COMPARACION_Y_RELACION_MAYOR_IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelationalOperators",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // RelationalOperators ::= OPERADOR_COMPARACION_Y_RELACION_MENOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelationalOperators",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // RelationalOperators ::= OPERADOR_COMPARACION_Y_RELACION_MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelationalOperators",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // RelationalOperators ::= OPERADOR_COMPARACION_DIFERENTE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelationalOperators",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // RelationalOperators ::= OPERADOR_ARITMETICO_IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelationalOperators",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ArithmeticOperators ::= MOD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArithmeticOperators",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ArithmeticOperators ::= DIV 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArithmeticOperators",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ArithmeticOperators ::= OPERADOR_ARITMETICO_MULTIPLICACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArithmeticOperators",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ArithmeticOperators ::= OPERADOR_ARITMETICO_RESTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArithmeticOperators",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ArithmeticOperators ::= OPERADOR_ARITMETICO_SUMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArithmeticOperators",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Expresion ::= NUMERO_FLOTANTE_CIENTIFICO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Expresion ::= CHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Expresion ::= NUMERO_FLOTANTE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Expresion ::= NUMERO_ENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Expresion ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Sentencia_asignacion ::= IDENTIFICADOR OPERADOR_OTRO_ASSIGNMENT Expresion OPERADOR_OTRO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia_asignacion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Sentencia ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Sentencia ::= Sentencia_compuesta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Sentencia ::= Sentencia_case 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Sentencia ::= Sentencia_for 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Sentencia ::= Sentencia_repeat 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Sentencia ::= Sentencia_while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Sentencia ::= Sentencia_if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Sentencia ::= Sentencia_asignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Conj_Sent ::= Sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Conj_Sent",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Conj_Sent ::= Sentencia Conj_Sent 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Conj_Sent",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Sentencia_compuesta ::= BEGIN Conj_Sent END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia_compuesta",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Tipo ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tipo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Tipo ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tipo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Tipo ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tipo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Tipo ::= SHORTINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tipo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Tipo ::= REAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tipo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Tipo ::= LONGINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tipo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Tipo ::= CHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tipo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Lista_id ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lista_id",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Lista_id ::= IDENTIFICADOR OPERADOR_OTRO_COMA Lista_id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lista_id",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Una_var ::= Lista_id OPERADOR_OTRO_DOS_PUNTOS Tipo OPERADOR_OTRO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Una_var",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Variables ::= Una_var 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Variables",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Variables ::= Una_var OPERADOR_OTRO_PUNTO_Y_COMA Variables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Variables",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Declaracion_var ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaracion_var",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Declaracion_var ::= VAR Variables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaracion_var",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Const_sin_signo ::= NUMERO_FLOTANTE_CIENTIFICO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const_sin_signo",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Const_sin_signo ::= NUMERO_FLOTANTE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const_sin_signo",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Const_sin_signo ::= NUMERO_ENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const_sin_signo",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Signo_opc ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Signo_opc",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Signo_opc ::= OPERADOR_ARITMETICO_RESTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Signo_opc",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Signo_opc ::= OPERADOR_ARITMETICO_SUMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Signo_opc",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Constante ::= CHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constante",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Constante ::= Signo_opc Const_sin_signo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constante",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Una_const ::= IDENTIFICADOR OPERADOR_ARITMETICO_IGUAL Constante 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Una_const",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Constantes ::= Una_const OPERADOR_OTRO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constantes",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Constantes ::= Una_const OPERADOR_OTRO_PUNTO_Y_COMA Constantes 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constantes",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Declaracion_const ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaracion_const",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Declaracion_const ::= CONST Constantes 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaracion_const",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Declaraciones ::= Declaracion_const Declaracion_var 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaraciones",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Funcion ::= FUNCTION IDENTIFICADOR OPERADOR_PARENTESIS_ABRE ListaParametros OPERADOR_PARENTESIS_CIERRA OPERADOR_OTRO_DOS_PUNTOS Tipo BEGIN Declaraciones Conj_Sent END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Funcion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Funcion ::= PROCEDURE IDENTIFICADOR OPERADOR_PARENTESIS_ABRE ListaParametros OPERADOR_PARENTESIS_CIERRA OPERADOR_OTRO_DOS_PUNTOS Tipo BEGIN Declaraciones Conj_Sent END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Funcion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // FuncionWrite ::= FUNCTION WRITE OPERADOR_PARENTESIS_ABRE Variables OPERADOR_PARENTESIS_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FuncionWrite",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // FuncionWrite ::= FUNCTION WRITE OPERADOR_PARENTESIS_ABRE Constantes OPERADOR_PARENTESIS_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FuncionWrite",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // FuncionRead ::= FUNCTION READ OPERADOR_PARENTESIS_ABRE OPERADOR_PARENTESIS_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FuncionRead",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // FuncionRead ::= FUNCTION READ OPERADOR_PARENTESIS_ABRE ListaParametros OPERADOR_PARENTESIS_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FuncionRead",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Cabecera ::= PROGRAM IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Cabecera",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Programa ::= Cabecera Declaraciones ListaTipoFuncion Sentencia_compuesta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Programa",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

