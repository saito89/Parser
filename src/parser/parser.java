
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Jun 02 15:35:29 CST 2013
//----------------------------------------------------

package parser;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Jun 02 15:35:29 CST 2013
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\125\000\002\002\004\000\002\004\005\000\002\005" +
    "\004\000\002\006\004\000\002\007\004\000\002\007\003" +
    "\000\002\010\005\000\002\010\004\000\002\011\005\000" +
    "\002\012\004\000\002\012\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\002\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\015\004\000\002\015\003" +
    "\000\002\016\004\000\002\016\003\000\002\017\006\000" +
    "\002\020\005\000\002\020\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\022\005" +
    "\000\002\002\004\000\002\002\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\024\006\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\026\004\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\040\003\000\002\040\003\000\002\040" +
    "\003\000\002\040\003\000\002\040\003\000\002\041\003" +
    "\000\002\041\003\000\002\041\003\000\002\041\003\000" +
    "\002\041\003\000\002\041\003\000\002\042\003\000\002" +
    "\042\003\000\002\042\003\000\002\043\005\000\002\043" +
    "\005\000\002\043\003\000\002\027\010\000\002\030\004" +
    "\000\002\030\003\000\002\031\007\000\002\032\007\000" +
    "\002\033\013\000\002\034\007\000\002\034\006\000\002" +
    "\035\003\000\002\035\003\000\002\035\003\000\002\035" +
    "\003\000\002\035\003\000\002\035\003\000\002\036\007" +
    "\000\002\037\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\213\000\004\014\006\001\002\000\006\003\012\025" +
    "\011\001\002\000\004\002\010\001\002\000\004\122\007" +
    "\001\002\000\006\003\uffff\025\uffff\001\002\000\004\002" +
    "\001\001\002\000\004\122\210\001\002\000\006\003\ufffc" +
    "\020\ufffc\001\002\000\004\006\041\001\002\000\006\003" +
    "\017\020\015\001\002\000\004\122\022\001\002\000\004" +
    "\006\ufffe\001\002\000\004\006\uffef\001\002\000\004\106" +
    "\027\001\002\000\006\006\uffed\122\022\001\002\000\006" +
    "\072\024\106\uffea\001\002\000\004\006\ufff0\001\002\000" +
    "\004\122\022\001\002\000\004\106\uffeb\001\002\000\004" +
    "\006\uffee\001\002\000\020\021\035\024\036\041\037\043" +
    "\034\051\032\055\033\056\031\001\002\000\004\071\040" +
    "\001\002\000\004\071\uffe5\001\002\000\004\071\uffe7\001" +
    "\002\000\004\071\uffe6\001\002\000\004\071\uffe8\001\002" +
    "\000\004\071\uffe4\001\002\000\004\071\uffe9\001\002\000" +
    "\004\071\uffe3\001\002\000\006\006\uffec\122\uffec\001\002" +
    "\000\022\003\055\006\041\011\052\023\057\033\045\053" +
    "\044\062\043\122\061\001\002\000\004\002\000\001\002" +
    "\000\014\024\071\122\066\123\065\124\070\127\067\001" +
    "\002\000\022\003\055\006\041\011\052\023\057\033\045" +
    "\053\044\062\043\122\061\001\002\000\004\122\162\001" +
    "\002\000\032\003\uffda\006\uffda\007\uffda\010\uffda\011\uffda" +
    "\023\uffda\033\uffda\053\uffda\061\uffda\062\uffda\071\uffda\122" +
    "\uffda\001\002\000\032\003\uffdb\006\uffdb\007\uffdb\010\uffdb" +
    "\011\uffdb\023\uffdb\033\uffdb\053\uffdb\061\uffdb\062\uffdb\071" +
    "\uffdb\122\uffdb\001\002\000\032\003\uffdc\006\uffdc\007\uffdc" +
    "\010\uffdc\011\uffdc\023\uffdc\033\uffdc\053\uffdc\061\uffdc\062" +
    "\uffdc\071\uffdc\122\uffdc\001\002\000\026\003\055\006\041" +
    "\010\uffe0\011\052\023\057\033\045\053\044\061\uffe0\062" +
    "\043\122\061\001\002\000\016\003\130\024\071\122\066" +
    "\123\065\124\070\127\067\001\002\000\032\003\uffde\006" +
    "\uffde\007\uffde\010\uffde\011\uffde\023\uffde\033\uffde\053\uffde" +
    "\061\uffde\062\uffde\071\uffde\122\uffde\001\002\000\032\003" +
    "\uffdf\006\uffdf\007\uffdf\010\uffdf\011\uffdf\023\uffdf\033\uffdf" +
    "\053\uffdf\061\uffdf\062\uffdf\071\uffdf\122\uffdf\001\002\000" +
    "\032\003\uffd8\006\uffd8\007\uffd8\010\uffd8\011\uffd8\023\uffd8" +
    "\033\uffd8\053\uffd8\061\uffd8\062\uffd8\071\uffd8\122\uffd8\001" +
    "\002\000\032\003\uffd9\006\uffd9\007\uffd9\010\uffd9\011\uffd9" +
    "\023\uffd9\033\uffd9\053\uffd9\061\uffd9\062\uffd9\071\uffd9\122" +
    "\uffd9\001\002\000\016\024\100\066\077\067\075\123\ufff4" +
    "\124\ufff4\127\ufff4\001\002\000\032\003\uffdd\006\uffdd\007" +
    "\uffdd\010\uffdd\011\uffdd\023\uffdd\033\uffdd\053\uffdd\061\uffdd" +
    "\062\uffdd\071\uffdd\122\uffdd\001\002\000\004\107\064\001" +
    "\002\000\004\010\063\001\002\000\034\002\uffe2\003\uffe2" +
    "\006\uffe2\007\uffe2\010\uffe2\011\uffe2\023\uffe2\033\uffe2\053" +
    "\uffe2\061\uffe2\062\uffe2\071\uffe2\122\uffe2\001\002\000\014" +
    "\024\071\122\066\123\065\124\070\127\067\001\002\000" +
    "\036\016\uffd4\026\uffd4\027\uffd4\044\uffd4\065\uffd4\066\uffd4" +
    "\067\uffd4\071\uffd4\077\uffd4\100\uffd4\101\uffd4\102\uffd4\103" +
    "\uffd4\111\uffd4\001\002\000\036\016\uffd6\026\uffd6\027\uffd6" +
    "\044\uffd6\065\uffd6\066\uffd6\067\uffd6\071\uffd6\077\uffd6\100" +
    "\uffd6\101\uffd6\102\uffd6\103\uffd6\111\uffd6\001\002\000\036" +
    "\016\uffd2\026\uffd2\027\uffd2\044\uffd2\065\uffd2\066\uffd2\067" +
    "\uffd2\071\uffd2\077\uffd2\100\uffd2\101\uffd2\102\uffd2\103\uffd2" +
    "\111\uffd2\001\002\000\036\016\uffd5\026\uffd5\027\uffd5\044" +
    "\uffd5\065\uffd5\066\uffd5\067\uffd5\071\uffd5\077\uffd5\100\uffd5" +
    "\101\uffd5\102\uffd5\103\uffd5\111\uffd5\001\002\000\036\016" +
    "\uffd3\026\uffd3\027\uffd3\044\uffd3\065\uffd3\066\uffd3\067\uffd3" +
    "\071\uffd3\077\uffd3\100\uffd3\101\uffd3\102\uffd3\103\uffd3\111" +
    "\uffd3\001\002\000\004\071\073\001\002\000\032\003\uffd7" +
    "\006\uffd7\007\uffd7\010\uffd7\011\uffd7\023\uffd7\033\uffd7\053" +
    "\uffd7\061\uffd7\062\uffd7\071\uffd7\122\uffd7\001\002\000\010" +
    "\123\124\124\127\127\126\001\002\000\010\123\ufff5\124" +
    "\ufff5\127\ufff5\001\002\000\004\012\101\001\002\000\010" +
    "\123\ufff6\124\ufff6\127\ufff6\001\002\000\010\012\ufff7\071" +
    "\ufff7\106\ufff7\001\002\000\016\024\100\066\077\067\075" +
    "\123\ufff4\124\ufff4\127\ufff4\001\002\000\004\106\121\001" +
    "\002\000\020\007\105\024\100\066\077\067\075\123\ufff4" +
    "\124\ufff4\127\ufff4\001\002\000\032\003\uffae\006\uffae\007" +
    "\uffae\010\uffae\011\uffae\023\uffae\033\uffae\053\uffae\061\uffae" +
    "\062\uffae\071\uffae\122\uffae\001\002\000\016\011\052\023" +
    "\057\033\045\053\044\062\043\122\061\001\002\000\004" +
    "\106\107\001\002\000\016\011\052\023\057\033\045\053" +
    "\044\062\043\122\061\001\002\000\032\003\uffb0\006\uffb0" +
    "\007\uffb0\010\uffb0\011\uffb0\023\uffb0\033\uffb0\053\uffb0\061" +
    "\uffb0\062\uffb0\071\uffb0\122\uffb0\001\002\000\004\071\117" +
    "\001\002\000\032\003\uffaf\006\uffaf\007\uffaf\010\uffaf\011" +
    "\uffaf\023\uffaf\033\uffaf\053\uffaf\061\uffaf\062\uffaf\071\uffaf" +
    "\122\uffaf\001\002\000\032\003\uffb1\006\uffb1\007\uffb1\010" +
    "\uffb1\011\uffb1\023\uffb1\033\uffb1\053\uffb1\061\uffb1\062\uffb1" +
    "\071\uffb1\122\uffb1\001\002\000\032\003\uffb3\006\uffb3\007" +
    "\uffb3\010\uffb3\011\uffb3\023\uffb3\033\uffb3\053\uffb3\061\uffb3" +
    "\062\uffb3\071\uffb3\122\uffb3\001\002\000\032\003\uffb4\006" +
    "\uffb4\007\uffb4\010\uffb4\011\uffb4\023\uffb4\033\uffb4\053\uffb4" +
    "\061\uffb4\062\uffb4\071\uffb4\122\uffb4\001\002\000\032\003" +
    "\uffb2\006\uffb2\007\uffb2\010\uffb2\011\uffb2\023\uffb2\033\uffb2" +
    "\053\uffb2\061\uffb2\062\uffb2\071\uffb2\122\uffb2\001\002\000" +
    "\020\007\uffb6\024\uffb6\066\uffb6\067\uffb6\123\uffb6\124\uffb6" +
    "\127\uffb6\001\002\000\032\003\uffad\006\uffad\007\uffad\010" +
    "\uffad\011\uffad\023\uffad\033\uffad\053\uffad\061\uffad\062\uffad" +
    "\071\uffad\122\uffad\001\002\000\016\011\052\023\057\033" +
    "\045\053\044\062\043\122\061\001\002\000\004\071\123" +
    "\001\002\000\020\007\uffb5\024\uffb5\066\uffb5\067\uffb5\123" +
    "\uffb5\124\uffb5\127\uffb5\001\002\000\010\012\ufff2\071\ufff2" +
    "\106\ufff2\001\002\000\010\012\ufff8\071\ufff8\106\ufff8\001" +
    "\002\000\010\012\ufff1\071\ufff1\106\ufff1\001\002\000\010" +
    "\012\ufff3\071\ufff3\106\ufff3\001\002\000\004\016\uffbd\001" +
    "\002\000\004\016\152\001\002\000\030\026\145\044\142" +
    "\065\136\066\140\067\137\077\134\100\144\101\147\102" +
    "\141\103\143\111\146\001\002\000\014\024\071\122\066" +
    "\123\065\124\070\127\067\001\002\000\014\024\uffc8\122" +
    "\uffc8\123\uffc8\124\uffc8\127\uffc8\001\002\000\014\024\071" +
    "\122\066\123\065\124\070\127\067\001\002\000\014\024" +
    "\uffcb\122\uffcb\123\uffcb\124\uffcb\127\uffcb\001\002\000\014" +
    "\024\uffcc\122\uffcc\123\uffcc\124\uffcc\127\uffcc\001\002\000" +
    "\014\024\uffcd\122\uffcd\123\uffcd\124\uffcd\127\uffcd\001\002" +
    "\000\014\024\uffc3\122\uffc3\123\uffc3\124\uffc3\127\uffc3\001" +
    "\002\000\014\024\uffc9\122\uffc9\123\uffc9\124\uffc9\127\uffc9" +
    "\001\002\000\014\024\uffc4\122\uffc4\123\uffc4\124\uffc4\127" +
    "\uffc4\001\002\000\014\024\uffc5\122\uffc5\123\uffc5\124\uffc5" +
    "\127\uffc5\001\002\000\014\024\uffca\122\uffca\123\uffca\124" +
    "\uffca\127\uffca\001\002\000\014\024\uffc7\122\uffc7\123\uffc7" +
    "\124\uffc7\127\uffc7\001\002\000\014\024\uffc6\122\uffc6\123" +
    "\uffc6\124\uffc6\127\uffc6\001\002\000\004\016\uffbe\001\002" +
    "\000\004\016\uffbf\001\002\000\004\003\153\001\002\000" +
    "\022\003\055\006\041\011\052\023\057\033\045\053\044" +
    "\062\043\122\061\001\002\000\006\003\157\007\156\001" +
    "\002\000\032\003\uffbc\006\uffbc\007\uffbc\010\uffbc\011\uffbc" +
    "\023\uffbc\033\uffbc\053\uffbc\061\uffbc\062\uffbc\071\uffbc\122" +
    "\uffbc\001\002\000\022\003\055\006\041\011\052\023\057" +
    "\033\045\053\044\062\043\122\061\001\002\000\032\003" +
    "\uffba\006\uffba\007\uffba\010\uffba\011\uffba\023\uffba\033\uffba" +
    "\053\uffba\061\uffba\062\uffba\071\uffba\122\uffba\001\002\000" +
    "\032\003\uffbb\006\uffbb\007\uffbb\010\uffbb\011\uffbb\023\uffbb" +
    "\033\uffbb\053\uffbb\061\uffbb\062\uffbb\071\uffbb\122\uffbb\001" +
    "\002\000\006\010\uffe1\061\uffe1\001\002\000\004\107\163" +
    "\001\002\000\014\066\077\067\075\123\ufff4\124\ufff4\127" +
    "\ufff4\001\002\000\004\057\172\001\002\000\010\123\166" +
    "\124\170\127\167\001\002\000\004\057\uffcf\001\002\000" +
    "\004\057\uffce\001\002\000\004\057\uffd0\001\002\000\004" +
    "\057\uffd1\001\002\000\014\024\071\122\066\123\065\124" +
    "\070\127\067\001\002\000\004\027\174\001\002\000\022" +
    "\003\055\006\041\011\052\023\057\033\045\053\044\062" +
    "\043\122\061\001\002\000\004\071\176\001\002\000\032" +
    "\003\uffb7\006\uffb7\007\uffb7\010\uffb7\011\uffb7\023\uffb7\033" +
    "\uffb7\053\uffb7\061\uffb7\062\uffb7\071\uffb7\122\uffb7\001\002" +
    "\000\004\061\200\001\002\000\014\024\071\122\066\123" +
    "\065\124\070\127\067\001\002\000\004\071\202\001\002" +
    "\000\032\003\uffb8\006\uffb8\007\uffb8\010\uffb8\011\uffb8\023" +
    "\uffb8\033\uffb8\053\uffb8\061\uffb8\062\uffb8\071\uffb8\122\uffb8" +
    "\001\002\000\004\027\204\001\002\000\022\003\055\006" +
    "\041\011\052\023\057\033\045\053\044\062\043\122\061" +
    "\001\002\000\004\071\206\001\002\000\032\003\uffb9\006" +
    "\uffb9\007\uffb9\010\uffb9\011\uffb9\023\uffb9\033\uffb9\053\uffb9" +
    "\061\uffb9\062\uffb9\071\uffb9\122\uffb9\001\002\000\006\003" +
    "\ufffd\020\ufffd\001\002\000\004\077\214\001\002\000\004" +
    "\071\212\001\002\000\010\003\ufffa\020\ufffa\122\210\001" +
    "\002\000\006\003\ufffb\020\ufffb\001\002\000\016\024\100" +
    "\066\077\067\075\123\ufff4\124\ufff4\127\ufff4\001\002\000" +
    "\004\071\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\213\000\006\004\004\005\003\001\001\000\006\006" +
    "\012\007\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\010\206\011" +
    "\210\001\001\000\002\001\001\000\004\022\041\001\001" +
    "\000\004\015\015\001\001\000\010\016\022\017\020\020" +
    "\017\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\016\025\017\020\020\017\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\024\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\027\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\002\061\022\055\023\050\024\053\027\052\031\057\032" +
    "\047\033\046\036\045\001\001\000\002\001\001\000\004" +
    "\025\202\001\001\000\024\002\176\022\055\023\050\024" +
    "\053\027\052\031\057\032\047\033\046\036\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\002\160\022\055\023\050\024\053" +
    "\027\052\031\057\032\047\033\046\036\045\001\001\000" +
    "\006\025\131\043\130\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\012" +
    "\075\013\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\025\071\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\124\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\012\101\013\073\034\102\001\001\000\002\001\001" +
    "\000\010\012\105\013\073\037\103\001\001\000\002\001" +
    "\001\000\020\024\114\027\113\031\115\032\112\033\107" +
    "\035\117\036\111\001\001\000\002\001\001\000\020\024" +
    "\114\027\113\031\115\032\112\033\107\035\110\036\111" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\024\114\027\113\031\115\032\112\033\107\035\121" +
    "\036\111\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\040" +
    "\132\041\134\001\001\000\004\025\150\001\001\000\002" +
    "\001\001\000\004\025\147\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\022\055\023" +
    "\153\024\053\027\052\031\057\032\047\033\046\036\045" +
    "\001\001\000\004\030\154\001\001\000\002\001\001\000" +
    "\022\022\055\023\157\024\053\027\052\031\057\032\047" +
    "\033\046\036\045\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\013\164" +
    "\026\163\001\001\000\002\001\001\000\004\003\170\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\172\001\001\000\002\001" +
    "\001\000\022\022\055\023\174\024\053\027\052\031\057" +
    "\032\047\033\046\036\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\200\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\022\055\023\204\024\053\027\052\031\057\032\047" +
    "\033\046\036\045\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\010\212\011\210\001\001\000\002\001\001\000" +
    "\006\012\214\013\073\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}






    public void syntax_error(Symbol cur_token) {
        report_error("Syntax error at line " + (cur_token.left+1) +
            ", column " + cur_token.right, null);
    }
public static void main(String args[]) throws Exception
    {
	new parser(new Lexer(System.in)).parse();
    } 
   


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Resto_case ::= ELSE SentenciaConstantesCase 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Resto_case",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Sentencia_case ::= CASE Constante OF ListaConstantesCase Resto_case 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia_case",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // SentenciaConstantesCase ::= Sentencia_case 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentenciaConstantesCase",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // SentenciaConstantesCase ::= Sentencia_for 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentenciaConstantesCase",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SentenciaConstantesCase ::= Sentencia_repeat 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentenciaConstantesCase",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // SentenciaConstantesCase ::= Sentencia_while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentenciaConstantesCase",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SentenciaConstantesCase ::= Sentencia_if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentenciaConstantesCase",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SentenciaConstantesCase ::= Sentencia_asignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentenciaConstantesCase",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ListaConstantesCase ::= Constante OPERADOR_OTRO_DOS_PUNTOS SentenciaConstantesCase OPERADOR_OTRO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListaConstantesCase",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ListaConstantesCase ::= ListaConstantesCase Constante OPERADOR_OTRO_DOS_PUNTOS SentenciaConstantesCase OPERADOR_OTRO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListaConstantesCase",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Sentencia_for ::= FOR IDENTIFICADOR OPERADOR_OTRO_ASSIGNMENT Numero TO Expresion DO Sentencia OPERADOR_OTRO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia_for",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Sentencia_repeat ::= REPEAT Conj_Sent UNTIL Expresion OPERADOR_OTRO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia_repeat",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Sentencia_while ::= WHILE Expresion DO Sentencia OPERADOR_OTRO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia_while",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Resto_if ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Resto_if",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Resto_if ::= ELSE Sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Resto_if",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Sentencia_if ::= IF Condicion THEN error Sentencia Resto_if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia_if",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Condicion ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Condicion ::= Expresion RelationalOperators Expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Condicion ::= Expresion ArithmeticOperators Expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // BooleanOperators ::= NOT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BooleanOperators",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // BooleanOperators ::= OR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BooleanOperators",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // BooleanOperators ::= AND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BooleanOperators",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // RelationalOperators ::= OPERADOR_COMPARACION_Y_RELACION_MENOR_IGUAL_EQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelationalOperators",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // RelationalOperators ::= OPERADOR_COMPARACION_Y_RELACION_MAYOR_IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelationalOperators",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // RelationalOperators ::= OPERADOR_COMPARACION_Y_RELACION_MENOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelationalOperators",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // RelationalOperators ::= OPERADOR_COMPARACION_Y_RELACION_MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelationalOperators",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // RelationalOperators ::= OPERADOR_COMPARACION_DIFERENTE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelationalOperators",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // RelationalOperators ::= OPERADOR_ARITMETICO_IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelationalOperators",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ArithmeticOperators ::= MOD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArithmeticOperators",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ArithmeticOperators ::= DIV 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArithmeticOperators",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ArithmeticOperators ::= OPERADOR_ARITMETICO_MULTIPLICACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArithmeticOperators",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ArithmeticOperators ::= OPERADOR_ARITMETICO_RESTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArithmeticOperators",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ArithmeticOperators ::= OPERADOR_ARITMETICO_SUMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArithmeticOperators",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NumeroExtra ::= NUMERO_FLOTANTE_CIENTIFICO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NumeroExtra",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NumeroExtra ::= NUMERO_FLOTANTE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NumeroExtra",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NumeroExtra ::= NUMERO_ENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NumeroExtra",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Numero ::= Signo_opc NumeroExtra 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Numero",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Expresion ::= NUMERO_FLOTANTE_CIENTIFICO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Expresion ::= CHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Expresion ::= NUMERO_FLOTANTE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Expresion ::= NUMERO_ENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Expresion ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Sentencia_asignacion ::= IDENTIFICADOR OPERADOR_OTRO_ASSIGNMENT Expresion OPERADOR_OTRO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia_asignacion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Sentencia ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Sentencia ::= Sentencia_compuesta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Sentencia ::= Sentencia_case 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Sentencia ::= Sentencia_for 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Sentencia ::= Sentencia_repeat 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Sentencia ::= Sentencia_while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Sentencia ::= Sentencia_if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Sentencia ::= Sentencia_asignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Conj_Sent ::= Sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Conj_Sent",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Conj_Sent ::= Sentencia Conj_Sent 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Conj_Sent",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Sentencia_compuesta ::= BEGIN Conj_Sent END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia_compuesta",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Tipo ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tipo",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Tipo ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tipo",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Tipo ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tipo",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Tipo ::= SHORTINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tipo",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Tipo ::= REAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tipo",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Tipo ::= LONGINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tipo",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Tipo ::= CHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tipo",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Lista_id ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lista_id",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Lista_id ::= IDENTIFICADOR OPERADOR_OTRO_COMA Lista_id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lista_id",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Una_var ::= Lista_id OPERADOR_OTRO_DOS_PUNTOS Tipo OPERADOR_OTRO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Una_var",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Variables ::= Una_var 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Variables",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Variables ::= Una_var Variables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Variables",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Declaracion_var ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaracion_var",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Declaracion_var ::= VAR Variables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaracion_var",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Const_sin_signo ::= NUMERO_FLOTANTE_CIENTIFICO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const_sin_signo",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Const_sin_signo ::= NUMERO_FLOTANTE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const_sin_signo",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Const_sin_signo ::= NUMERO_ENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const_sin_signo",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Signo_opc ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Signo_opc",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Signo_opc ::= OPERADOR_ARITMETICO_RESTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Signo_opc",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Signo_opc ::= OPERADOR_ARITMETICO_SUMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Signo_opc",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Constante ::= CHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constante",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Constante ::= Signo_opc Const_sin_signo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constante",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Una_const ::= IDENTIFICADOR OPERADOR_ARITMETICO_IGUAL Constante 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Una_const",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Constantes ::= Una_const OPERADOR_OTRO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constantes",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Constantes ::= Una_const OPERADOR_OTRO_PUNTO_Y_COMA Constantes 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constantes",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Declaracion_const ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaracion_const",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Declaracion_const ::= CONST Constantes 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaracion_const",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Declaraciones ::= Declaracion_const Declaracion_var 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaraciones",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Cabecera ::= PROGRAM IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Cabecera",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Programa ::= Cabecera Declaraciones Sentencia_compuesta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Programa",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

