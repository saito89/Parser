
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Jun 02 09:47:42 CST 2013
//----------------------------------------------------

package parser;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Jun 02 09:47:42 CST 2013
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\102\000\002\002\004\000\002\004\005\000\002\005" +
    "\004\000\002\006\004\000\002\007\004\000\002\007\003" +
    "\000\002\010\005\000\002\010\004\000\002\011\005\000" +
    "\002\012\004\000\002\012\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\002\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\015\004\000\002\015\003" +
    "\000\002\016\004\000\002\016\003\000\002\017\006\000" +
    "\002\020\005\000\002\020\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\022\005" +
    "\000\002\002\004\000\002\002\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\024" +
    "\006\000\002\024\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\026\004\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\027\010\000\002\030\004\000\002\031\007\000\002\032" +
    "\007\000\002\033\013\000\002\034\007\000\002\034\006" +
    "\000\002\035\003\000\002\035\003\000\002\035\003\000" +
    "\002\035\003\000\002\035\003\000\002\035\003\000\002" +
    "\036\007\000\002\037\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\170\000\004\014\006\001\002\000\006\003\012\025" +
    "\011\001\002\000\004\002\010\001\002\000\004\122\007" +
    "\001\002\000\006\003\uffff\025\uffff\001\002\000\004\002" +
    "\001\001\002\000\004\122\165\001\002\000\006\003\ufffc" +
    "\020\ufffc\001\002\000\004\006\041\001\002\000\006\003" +
    "\017\020\015\001\002\000\004\122\022\001\002\000\004" +
    "\006\ufffe\001\002\000\004\006\uffef\001\002\000\004\106" +
    "\027\001\002\000\006\006\uffed\122\022\001\002\000\006" +
    "\072\024\106\uffea\001\002\000\004\006\ufff0\001\002\000" +
    "\004\122\022\001\002\000\004\106\uffeb\001\002\000\004" +
    "\006\uffee\001\002\000\020\021\035\024\036\041\037\043" +
    "\034\051\032\055\033\056\031\001\002\000\004\071\040" +
    "\001\002\000\004\071\uffe5\001\002\000\004\071\uffe7\001" +
    "\002\000\004\071\uffe6\001\002\000\004\071\uffe8\001\002" +
    "\000\004\071\uffe4\001\002\000\004\071\uffe9\001\002\000" +
    "\004\071\uffe3\001\002\000\006\006\uffec\122\uffec\001\002" +
    "\000\022\003\055\006\041\011\052\023\057\033\045\053" +
    "\043\062\044\122\061\001\002\000\004\002\000\001\002" +
    "\000\022\003\055\006\041\011\052\023\057\033\045\053" +
    "\043\062\044\122\061\001\002\000\012\024\070\122\066" +
    "\123\065\124\067\001\002\000\004\122\137\001\002\000" +
    "\032\003\uffda\006\uffda\007\uffda\010\uffda\011\uffda\023\uffda" +
    "\033\uffda\053\uffda\061\uffda\062\uffda\071\uffda\122\uffda\001" +
    "\002\000\032\003\uffdb\006\uffdb\007\uffdb\010\uffdb\011\uffdb" +
    "\023\uffdb\033\uffdb\053\uffdb\061\uffdb\062\uffdb\071\uffdb\122" +
    "\uffdb\001\002\000\032\003\uffdc\006\uffdc\007\uffdc\010\uffdc" +
    "\011\uffdc\023\uffdc\033\uffdc\053\uffdc\061\uffdc\062\uffdc\071" +
    "\uffdc\122\uffdc\001\002\000\026\003\055\006\041\010\uffe0" +
    "\011\052\023\057\033\045\053\043\061\uffe0\062\044\122" +
    "\061\001\002\000\012\024\070\122\066\123\065\124\067" +
    "\001\002\000\032\003\uffde\006\uffde\007\uffde\010\uffde\011" +
    "\uffde\023\uffde\033\uffde\053\uffde\061\uffde\062\uffde\071\uffde" +
    "\122\uffde\001\002\000\032\003\uffdf\006\uffdf\007\uffdf\010" +
    "\uffdf\011\uffdf\023\uffdf\033\uffdf\053\uffdf\061\uffdf\062\uffdf" +
    "\071\uffdf\122\uffdf\001\002\000\032\003\uffd7\006\uffd7\007" +
    "\uffd7\010\uffd7\011\uffd7\023\uffd7\033\uffd7\053\uffd7\061\uffd7" +
    "\062\uffd7\071\uffd7\122\uffd7\001\002\000\032\003\uffd9\006" +
    "\uffd9\007\uffd9\010\uffd9\011\uffd9\023\uffd9\033\uffd9\053\uffd9" +
    "\061\uffd9\062\uffd9\071\uffd9\122\uffd9\001\002\000\016\024" +
    "\077\066\076\067\074\123\ufff4\124\ufff4\127\ufff4\001\002" +
    "\000\032\003\uffdd\006\uffdd\007\uffdd\010\uffdd\011\uffdd\023" +
    "\uffdd\033\uffdd\053\uffdd\061\uffdd\062\uffdd\071\uffdd\122\uffdd" +
    "\001\002\000\004\107\064\001\002\000\004\010\063\001" +
    "\002\000\034\002\uffe2\003\uffe2\006\uffe2\007\uffe2\010\uffe2" +
    "\011\uffe2\023\uffe2\033\uffe2\053\uffe2\061\uffe2\062\uffe2\071" +
    "\uffe2\122\uffe2\001\002\000\012\024\070\122\066\123\065" +
    "\124\067\001\002\000\010\016\uffd4\027\uffd4\071\uffd4\001" +
    "\002\000\010\016\uffd6\027\uffd6\071\uffd6\001\002\000\010" +
    "\016\uffd5\027\uffd5\071\uffd5\001\002\000\010\016\uffd3\027" +
    "\uffd3\071\uffd3\001\002\000\004\071\072\001\002\000\032" +
    "\003\uffd8\006\uffd8\007\uffd8\010\uffd8\011\uffd8\023\uffd8\033" +
    "\uffd8\053\uffd8\061\uffd8\062\uffd8\071\uffd8\122\uffd8\001\002" +
    "\000\010\123\123\124\126\127\125\001\002\000\010\123" +
    "\ufff5\124\ufff5\127\ufff5\001\002\000\004\012\100\001\002" +
    "\000\010\123\ufff6\124\ufff6\127\ufff6\001\002\000\010\012" +
    "\ufff7\071\ufff7\106\ufff7\001\002\000\016\024\077\066\076" +
    "\067\074\123\ufff4\124\ufff4\127\ufff4\001\002\000\004\106" +
    "\120\001\002\000\020\007\104\024\077\066\076\067\074" +
    "\123\ufff4\124\ufff4\127\ufff4\001\002\000\032\003\uffc1\006" +
    "\uffc1\007\uffc1\010\uffc1\011\uffc1\023\uffc1\033\uffc1\053\uffc1" +
    "\061\uffc1\062\uffc1\071\uffc1\122\uffc1\001\002\000\020\003" +
    "\055\011\052\023\057\033\045\053\043\062\044\122\061" +
    "\001\002\000\004\106\106\001\002\000\020\003\055\011" +
    "\052\023\057\033\045\053\043\062\044\122\061\001\002" +
    "\000\004\071\116\001\002\000\032\003\uffc2\006\uffc2\007" +
    "\uffc2\010\uffc2\011\uffc2\023\uffc2\033\uffc2\053\uffc2\061\uffc2" +
    "\062\uffc2\071\uffc2\122\uffc2\001\002\000\032\003\uffc3\006" +
    "\uffc3\007\uffc3\010\uffc3\011\uffc3\023\uffc3\033\uffc3\053\uffc3" +
    "\061\uffc3\062\uffc3\071\uffc3\122\uffc3\001\002\000\032\003" +
    "\uffc4\006\uffc4\007\uffc4\010\uffc4\011\uffc4\023\uffc4\033\uffc4" +
    "\053\uffc4\061\uffc4\062\uffc4\071\uffc4\122\uffc4\001\002\000" +
    "\032\003\uffc6\006\uffc6\007\uffc6\010\uffc6\011\uffc6\023\uffc6" +
    "\033\uffc6\053\uffc6\061\uffc6\062\uffc6\071\uffc6\122\uffc6\001" +
    "\002\000\032\003\uffc7\006\uffc7\007\uffc7\010\uffc7\011\uffc7" +
    "\023\uffc7\033\uffc7\053\uffc7\061\uffc7\062\uffc7\071\uffc7\122" +
    "\uffc7\001\002\000\032\003\uffc5\006\uffc5\007\uffc5\010\uffc5" +
    "\011\uffc5\023\uffc5\033\uffc5\053\uffc5\061\uffc5\062\uffc5\071" +
    "\uffc5\122\uffc5\001\002\000\020\007\uffc9\024\uffc9\066\uffc9" +
    "\067\uffc9\123\uffc9\124\uffc9\127\uffc9\001\002\000\032\003" +
    "\uffc0\006\uffc0\007\uffc0\010\uffc0\011\uffc0\023\uffc0\033\uffc0" +
    "\053\uffc0\061\uffc0\062\uffc0\071\uffc0\122\uffc0\001\002\000" +
    "\020\003\055\011\052\023\057\033\045\053\043\062\044" +
    "\122\061\001\002\000\004\071\122\001\002\000\020\007" +
    "\uffc8\024\uffc8\066\uffc8\067\uffc8\123\uffc8\124\uffc8\127\uffc8" +
    "\001\002\000\010\012\ufff2\071\ufff2\106\ufff2\001\002\000" +
    "\010\012\ufff8\071\ufff8\106\ufff8\001\002\000\010\012\ufff1" +
    "\071\ufff1\106\ufff1\001\002\000\010\012\ufff3\071\ufff3\106" +
    "\ufff3\001\002\000\004\016\130\001\002\000\022\003\055" +
    "\006\041\011\052\023\057\033\045\053\043\062\044\122" +
    "\061\001\002\000\004\007\133\001\002\000\004\071\135" +
    "\001\002\000\022\003\055\006\041\011\052\023\057\033" +
    "\045\053\043\062\044\122\061\001\002\000\004\071\uffcd" +
    "\001\002\000\032\003\uffce\006\uffce\007\uffce\010\uffce\011" +
    "\uffce\023\uffce\033\uffce\053\uffce\061\uffce\062\uffce\071\uffce" +
    "\122\uffce\001\002\000\006\010\uffe1\061\uffe1\001\002\000" +
    "\004\107\140\001\002\000\014\066\076\067\074\123\ufff4" +
    "\124\ufff4\127\ufff4\001\002\000\004\057\147\001\002\000" +
    "\010\123\143\124\145\127\144\001\002\000\004\057\uffd0" +
    "\001\002\000\004\057\uffcf\001\002\000\004\057\uffd1\001" +
    "\002\000\004\057\uffd2\001\002\000\012\024\070\122\066" +
    "\123\065\124\067\001\002\000\004\027\151\001\002\000" +
    "\022\003\055\006\041\011\052\023\057\033\045\053\043" +
    "\062\044\122\061\001\002\000\004\071\153\001\002\000" +
    "\032\003\uffca\006\uffca\007\uffca\010\uffca\011\uffca\023\uffca" +
    "\033\uffca\053\uffca\061\uffca\062\uffca\071\uffca\122\uffca\001" +
    "\002\000\004\027\155\001\002\000\022\003\055\006\041" +
    "\011\052\023\057\033\045\053\043\062\044\122\061\001" +
    "\002\000\004\071\157\001\002\000\032\003\uffcc\006\uffcc" +
    "\007\uffcc\010\uffcc\011\uffcc\023\uffcc\033\uffcc\053\uffcc\061" +
    "\uffcc\062\uffcc\071\uffcc\122\uffcc\001\002\000\004\061\161" +
    "\001\002\000\012\024\070\122\066\123\065\124\067\001" +
    "\002\000\004\071\163\001\002\000\032\003\uffcb\006\uffcb" +
    "\007\uffcb\010\uffcb\011\uffcb\023\uffcb\033\uffcb\053\uffcb\061" +
    "\uffcb\062\uffcb\071\uffcb\122\uffcb\001\002\000\006\003\ufffd" +
    "\020\ufffd\001\002\000\004\077\171\001\002\000\004\071" +
    "\167\001\002\000\010\003\ufffa\020\ufffa\122\165\001\002" +
    "\000\006\003\ufffb\020\ufffb\001\002\000\016\024\077\066" +
    "\076\067\074\123\ufff4\124\ufff4\127\ufff4\001\002\000\004" +
    "\071\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\170\000\006\004\004\005\003\001\001\000\006\006" +
    "\012\007\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\010\163\011" +
    "\165\001\001\000\002\001\001\000\004\022\041\001\001" +
    "\000\004\015\015\001\001\000\010\016\022\017\020\020" +
    "\017\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\016\025\017\020\020\017\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\024\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\027\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\002\061\022\055\023\050\024\053\027\052\031\057\032" +
    "\047\033\046\036\045\001\001\000\002\001\001\000\024" +
    "\002\157\022\055\023\050\024\053\027\052\031\057\032" +
    "\047\033\046\036\045\001\001\000\004\025\153\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\002\135\022\055\023\050\024\053" +
    "\027\052\031\057\032\047\033\046\036\045\001\001\000" +
    "\004\025\126\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\012\074\013" +
    "\072\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\025\070\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\123\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\012\100\013\072\034" +
    "\101\001\001\000\002\001\001\000\010\012\104\013\072" +
    "\037\102\001\001\000\002\001\001\000\020\024\113\027" +
    "\112\031\114\032\111\033\110\035\116\036\107\001\001" +
    "\000\002\001\001\000\020\024\113\027\112\031\114\032" +
    "\111\033\110\035\106\036\107\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\024\113\027\112\031" +
    "\114\032\111\033\110\035\120\036\107\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\022\055\023\130\024\053\027\052\031\057\032" +
    "\047\033\046\036\045\001\001\000\004\030\131\001\001" +
    "\000\002\001\001\000\022\022\055\023\133\024\053\027" +
    "\052\031\057\032\047\033\046\036\045\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\013\141\026\140\001\001\000\002\001\001" +
    "\000\004\003\145\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\025\147" +
    "\001\001\000\002\001\001\000\022\022\055\023\151\024" +
    "\053\027\052\031\057\032\047\033\046\036\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\022\055\023\155\024\053\027\052\031\057\032\047" +
    "\033\046\036\045\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\025\161\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\010\167\011\165\001\001" +
    "\000\002\001\001\000\006\012\171\013\072\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}






    public void syntax_error(Symbol cur_token) {
        report_error("Syntax error at line " + (cur_token.left+1) +
            ", column " + cur_token.right, null);
    }
public static void main(String args[]) throws Exception
    {
	new parser(new Lexer(System.in)).parse();
    } 
   


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Resto_case ::= ELSE SentenciaConstantesCase 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Resto_case",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Sentencia_case ::= CASE Constante OF ListaConstantesCase Resto_case 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia_case",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SentenciaConstantesCase ::= Sentencia_case 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentenciaConstantesCase",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SentenciaConstantesCase ::= Sentencia_for 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentenciaConstantesCase",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SentenciaConstantesCase ::= Sentencia_repeat 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentenciaConstantesCase",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SentenciaConstantesCase ::= Sentencia_while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentenciaConstantesCase",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SentenciaConstantesCase ::= Sentencia_if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentenciaConstantesCase",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SentenciaConstantesCase ::= Sentencia_asignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentenciaConstantesCase",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ListaConstantesCase ::= Constante OPERADOR_OTRO_DOS_PUNTOS SentenciaConstantesCase OPERADOR_OTRO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListaConstantesCase",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ListaConstantesCase ::= ListaConstantesCase Constante OPERADOR_OTRO_DOS_PUNTOS SentenciaConstantesCase OPERADOR_OTRO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListaConstantesCase",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Sentencia_for ::= FOR IDENTIFICADOR OPERADOR_OTRO_ASSIGNMENT Numero TO Expresion DO Sentencia OPERADOR_OTRO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia_for",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Sentencia_repeat ::= REPEAT Conj_Sent UNTIL Expresion OPERADOR_OTRO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia_repeat",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Sentencia_while ::= WHILE Expresion DO Sentencia OPERADOR_OTRO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia_while",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Resto_if ::= ELSE Sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Resto_if",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Sentencia_if ::= IF Expresion THEN Sentencia Resto_if OPERADOR_OTRO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia_if",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NumeroExtra ::= NUMERO_FLOTANTE_CIENTIFICO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NumeroExtra",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NumeroExtra ::= NUMERO_FLOTANTE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NumeroExtra",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NumeroExtra ::= NUMERO_ENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NumeroExtra",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Numero ::= Signo_opc NumeroExtra 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Numero",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Expresion ::= CHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Expresion ::= NUMERO_FLOTANTE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Expresion ::= NUMERO_ENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Expresion ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Sentencia_asignacion ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia_asignacion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Sentencia_asignacion ::= IDENTIFICADOR OPERADOR_OTRO_ASSIGNMENT Expresion OPERADOR_OTRO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia_asignacion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Sentencia ::= Sentencia_compuesta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Sentencia ::= Sentencia_case 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Sentencia ::= Sentencia_for 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Sentencia ::= Sentencia_repeat 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Sentencia ::= Sentencia_while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Sentencia ::= Sentencia_if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Sentencia ::= Sentencia_asignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Conj_Sent ::= Sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Conj_Sent",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Conj_Sent ::= Sentencia Conj_Sent 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Conj_Sent",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Sentencia_compuesta ::= BEGIN Conj_Sent END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia_compuesta",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Tipo ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tipo",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Tipo ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tipo",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Tipo ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tipo",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Tipo ::= SHORTINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tipo",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Tipo ::= REAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tipo",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Tipo ::= LONGINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tipo",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Tipo ::= CHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tipo",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Lista_id ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lista_id",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Lista_id ::= IDENTIFICADOR OPERADOR_OTRO_COMA Lista_id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lista_id",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Una_var ::= Lista_id OPERADOR_OTRO_DOS_PUNTOS Tipo OPERADOR_OTRO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Una_var",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Variables ::= Una_var 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Variables",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Variables ::= Una_var Variables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Variables",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Declaracion_var ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaracion_var",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Declaracion_var ::= VAR Variables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaracion_var",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Const_sin_signo ::= NUMERO_FLOTANTE_CIENTIFICO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const_sin_signo",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Const_sin_signo ::= NUMERO_FLOTANTE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const_sin_signo",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Const_sin_signo ::= NUMERO_ENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const_sin_signo",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Signo_opc ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Signo_opc",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Signo_opc ::= OPERADOR_ARITMETICO_RESTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Signo_opc",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Signo_opc ::= OPERADOR_ARITMETICO_SUMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Signo_opc",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Constante ::= CHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constante",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Constante ::= Signo_opc Const_sin_signo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constante",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Una_const ::= IDENTIFICADOR OPERADOR_ARITMETICO_IGUAL Constante 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Una_const",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Constantes ::= Una_const OPERADOR_OTRO_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constantes",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Constantes ::= Una_const OPERADOR_OTRO_PUNTO_Y_COMA Constantes 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constantes",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Declaracion_const ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaracion_const",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Declaracion_const ::= CONST Constantes 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaracion_const",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Declaraciones ::= Declaracion_const Declaracion_var 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaraciones",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Cabecera ::= PROGRAM IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Cabecera",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Programa ::= Cabecera Declaraciones Sentencia_compuesta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Programa",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

